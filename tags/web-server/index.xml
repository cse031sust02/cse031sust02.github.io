<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Server on cse031sust02</title>
    <link>https://cse031sust02.github.io/tags/web-server/index.xml</link>
    <description>Recent content in Web Server on cse031sust02</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2017</copyright>
    <atom:link href="https://cse031sust02.github.io/tags/web-server/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Understanding the Nginx Server Block</title>
      <link>https://cse031sust02.github.io/post/understanding-nginx-server-block/</link>
      <pubDate>Tue, 19 Sep 2017 16:54:45 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/understanding-nginx-server-block/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;We can think of Server Blocks as specifications for individual web sites. Server blocks are the NGINX equivalent of Apache&amp;rsquo;s virtual hosts. We need to understand the directives and settings that make up the server block.&lt;/p&gt;

&lt;p&gt;Here is a sample virtual host :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
  listen       80;
  server_name  _;

  location / {
    root   /usr/share/nginx/html;
    index  index.html index.htm;
  }

  error_page  404              /404.html;
  location = /404.html {
    root   /usr/share/nginx/html;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see different types of directives such as &lt;em&gt;listen&lt;/em&gt;, &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;server_name&lt;/em&gt;, &lt;em&gt;location&lt;/em&gt; etc. Let&amp;rsquo;s explore those directives.&lt;/p&gt;

&lt;h4 id=&#34;listen&#34;&gt;listen&lt;/h4&gt;

&lt;p&gt;It specifies the IP address / port combination that this server block is designed to respond to.&lt;/p&gt;

&lt;p&gt;We can specify &lt;em&gt;only the port&lt;/em&gt; or &lt;em&gt;only the address&lt;/em&gt; or Both.&lt;/p&gt;

&lt;p&gt;If a port is omitted, the standard port(80) is used. And if an address is omitted, the server listens on all addresses. We can also use more than one listen directive, if needed. Here are some examles.&lt;/p&gt;

&lt;p&gt;port is omitted :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;listen     127.0.0.1; 
# will only respond to 127.0.0.1:80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;address is omitted :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;listen     50; 
# will respond to port 50 of all addresses. i.e: 127.0.0.1:50, localhost:50 etc..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IP address / port combination :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;listen     192.168.25.19:60; 
# will only respond to 192.168.25.19:60
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;server-name&#34;&gt;server_name&lt;/h4&gt;

&lt;p&gt;Nginx also checks the &lt;code&gt;Host&lt;/code&gt; header of each request. When client makes a requests, Nginx checks if there is any server block that has a server_name directive defined with that &amp;ldquo;Host&amp;rdquo;. If there is a match, then that server block will responds to that request.&lt;/p&gt;

&lt;p&gt;It will be easy to understand with an example.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create two new host in the &lt;code&gt;/etc/hosts&lt;/code&gt; file :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1   localhost
127.0.0.1   www.site-one.com
127.0.0.1   www.site-two.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, now both &lt;strong&gt;site-one&lt;/strong&gt; and &lt;strong&gt;site-two&lt;/strong&gt; points to same IP address. But we want to put one website in site-one.com and another website in site-two.com. Let&amp;rsquo;s create two different server blocks for those two hosts :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# First Website
server {
  listen       70;
  server_name  www.site-one.com;
  
  root   /usr/share/nginx/html/site-one/;
}

# Second Website
server {
  listen       70;
  server_name  www.site-two.com;

  root   /usr/share/nginx/html/site-two/;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is clear that we can browse First Website with the address &lt;code&gt;www.site-one.com:70&lt;/code&gt;, and the Second Website with &lt;code&gt;www.site-one.com:70&lt;/code&gt;. Now, there is a Quiz. What website will open when we go to 127.0.0.1:70?&lt;/p&gt;

&lt;h4 id=&#34;root&#34;&gt;root&lt;/h4&gt;

&lt;p&gt;This directive specifies the directory where the website&amp;rsquo;s contents are located. So, in our last example, If the URL is &lt;em&gt;&lt;a href=&#34;http://www.site-two.com/mypage.html&#34;&gt;http://www.site-two.com/mypage.html&lt;/a&gt;&lt;/em&gt;, Nginx will load &lt;code&gt;mypage.html&lt;/code&gt; file from &lt;code&gt;/usr/share/nginx/site-two&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;A more detailed overview of how nginx porcesses a request can be found &lt;a href=&#34;http://nginx.org/en/docs/http/request_processing.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I learned to stop panicking and play with NGINX</title>
      <link>https://cse031sust02.github.io/post/getting-started-with-nginx/</link>
      <pubDate>Sun, 20 Aug 2017 17:18:51 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/getting-started-with-nginx/</guid>
      <description>

&lt;hr /&gt;

&lt;h3 id=&#34;what-is-nginx&#34;&gt;What is Nginx&lt;/h3&gt;

&lt;p&gt;Nginx is a high performance web server which is lightweight, free and open-source. It can be used as a standalone &lt;a href=&#34;https://youtu.be/XhgUClE5uC0?t=11m13s&#34;&gt;web server&lt;/a&gt; (like Apache) or as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Reverse_proxy&#34;&gt;reverse proxy&lt;/a&gt; (serve in front of the web servers). Nginx is also used as mail proxy server, load balancer and HTTP cache.&lt;/p&gt;

&lt;h5 id=&#34;why-use-nginx&#34;&gt;Why use Nginx?&lt;/h5&gt;

&lt;p&gt;There are other web servers such as Apache, IIS etc. So what makes Nginx special? It is especially good at handling many concurrent connections as it was originally developed to handle &lt;a href=&#34;http://www.kegel.com/c10k.html&#34;&gt;C10k problem&lt;/a&gt; (serving 10000 concurrent connections). Nginx serves requests asynchronously while other web servers (such as Apache, IIS) creates new threads for every request received.&lt;/p&gt;

&lt;p&gt;Nginx can also work alognside other web servers as a reverse proxy. Nginx not only serve HTTP &amp;amp; HTTPS protocol but also IMAP, POP3 and SMPT. We can use Nginx on servers with very limited hardware capabilites. A very detailed overview of why we should use Nginx can be found &lt;a href=&#34;https://youtu.be/XhgUClE5uC0?t=16m57s&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;There are various ways to download and install Nginx. Please follow &lt;a href=&#34;https://www.nginx.com/resources/wiki/start/topics/tutorials/install/&#34;&gt;Official Guide&lt;/a&gt; to install Nginx on your system.&lt;/p&gt;

&lt;p&gt;On Ubuntu, One should be able to install Nginx easily with the &lt;code&gt;apt-get install nginx&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;After installing Nginx, we should see the welcome page by entering the IP address (we can get that using &lt;code&gt;ifconfig&lt;/code&gt; command) of our server on a browser.&lt;/p&gt;

&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;For most linux distributions, all Nginx config files are located in &lt;code&gt;/etc/nginx&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;nginx.conf&lt;/strong&gt; is the main configuration file. It is Nginx&amp;rsquo;s main control point which reads in all of the other appropriate configuration files and combines them into a monolithic configuration file when the server starts.&lt;/p&gt;

&lt;p&gt;The structure of that configuration file looks like below :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user nobody; 

events {
   ...
}

http {
    ...

    server {
    	...
    }

    server {
    	...
    }
}

stream {
   ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we can see, This file consists of &lt;strong&gt;directives&lt;/strong&gt; and their parameters. There are two kinds of directives.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;simple directives&lt;/strong&gt; : These directives end with a semicolon.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user nobody;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;contexts&lt;/strong&gt; : A few directives group together related directives. Those directives are referred to as contexts. i.e, events, http and server etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;To know more details about the configuration file and what is the purpose of the each directives, please visit the &lt;a href=&#34;https://www.nginx.com/resources/admin-guide/configuration-files/&#34;&gt;official guide&lt;/a&gt;. This &lt;a href=&#34;https://www.nginx.com/resources/wiki/start/topics/examples/full/&#34;&gt;example&lt;/a&gt; is helpful too.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;hosting-sites&#34;&gt;Hosting Sites&lt;/h4&gt;

&lt;p&gt;For hosting websites, we need to understand how to set up virtual servers.&lt;/p&gt;

&lt;p&gt;A virtual server is defined by a server directive in the http context.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    server {
        # Server configuration
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it is possible to add multiple virtual servers into the http context.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    server {
        # Server One configuration
    }

    server {
        # Server Two configuration
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if we add 10 virtual servers, the &lt;strong&gt;nginx.conf&lt;/strong&gt; file will become very long and modifying that file will be a headache. This is why &lt;strong&gt;sites-enabled&lt;/strong&gt; folder exists. We can make seperate configuration file for each virtual host. And in the main nginx.conf file, we will include that folder :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    # Virtual Hosts
    include /etc/nginx/sites-enabled/*;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, now every virtual servers listed in &lt;strong&gt;sites-enabled&lt;/strong&gt; folder will be public to visitors.&lt;/p&gt;

&lt;p&gt;We usually have to manage many different sites and may need to activate/deactivate any particular site anytime. This is why we use &lt;strong&gt;sites-available&lt;/strong&gt; folder for storing all of our virtual host configurations(whether they&amp;rsquo;re currently enabled or not). To enable any particular virtual host, we will symbolically link it&amp;rsquo;s configuration file to &lt;strong&gt;sites-enabled&lt;/strong&gt; directory.&lt;/p&gt;

&lt;p&gt;I have written another &lt;a href=&#34;https://cse031sust02.github.io/post/understand-nginx-server-block/&#34;&gt;post&lt;/a&gt; where i tried to explain the server block in details.&lt;/p&gt;

&lt;h3 id=&#34;reloading-nginx&#34;&gt;Reloading Nginx&lt;/h3&gt;

&lt;p&gt;Whenever we change the configuration, we will need to restart nginx server for changes to take place.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service nginx restart
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>