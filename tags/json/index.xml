<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json on cse031sust02</title>
    <link>https://cse031sust02.github.io/tags/json/index.xml</link>
    <description>Recent content in Json on cse031sust02</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2017 cse031sust02 | &lt;a href=&#34;https://github.com/mgjohansen/hucore.git&#34; target=&#34;_blank&#34;&gt;Hucore theme&lt;/a&gt; &amp; &lt;a href=&#34;http://gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; â™¥</copyright>
    <atom:link href="https://cse031sust02.github.io/tags/json/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JSON</title>
      <link>https://cse031sust02.github.io/post/json/</link>
      <pubDate>Sun, 09 Apr 2017 18:15:22 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/json/</guid>
      <description>

&lt;hr /&gt;

&lt;h2 id=&#34;what-is-json&#34;&gt;What is JSON?&lt;/h2&gt;

&lt;p&gt;JSON stands for JavaScript Object Notation.&lt;/p&gt;

&lt;p&gt;Douglas Crockford originally specified the JSON format in the early 2000s. Altohugh it derives from JavaScript, but as of 2017 many programming languages include code to generate and parse JSON-format data.&lt;/p&gt;

&lt;p&gt;JSON filenames use the extension .json.&lt;/p&gt;

&lt;p&gt;The official internet media type for JSON is &amp;lsquo;application/json&amp;rsquo;&lt;/p&gt;

&lt;h3 id=&#34;why-use-json&#34;&gt;Why Use JSON?&lt;/h3&gt;

&lt;p&gt;Because It is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lightweight data-interchange format.&lt;/li&gt;
&lt;li&gt;language independent&lt;/li&gt;
&lt;li&gt;&amp;ldquo;self-describing&amp;rdquo; and easy to understand by both humans (to understand) and machines (to parse and generate).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;usage&#34;&gt;USAGE?&lt;/h3&gt;

&lt;p&gt;JSON is heavily used in these areas : API, NoSQL, AJAX, Package Management (Composer, NPM, Bower etc)&lt;/p&gt;

&lt;h3 id=&#34;why-better-than-xml&#34;&gt;Why better than XML?&lt;/h3&gt;

&lt;p&gt;JSON is faster and easier than XML. It is parsed very easily into a ready-to-use JavaScript object while XML is much more difficult to parse.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;data-structure-rules&#34;&gt;Data Structure &amp;amp; Rules&lt;/h2&gt;

&lt;p&gt;The JSON syntax is a subset of the JavaScript syntax.&lt;/p&gt;

&lt;h3 id=&#34;data-structures&#34;&gt;Data Structures&lt;/h3&gt;

&lt;p&gt;JSON is defined by two basic structures.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A collection of name/value pairs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Different programming languages support this data structure in different names. Like object, record, struct, dictionary, hash table, keyed list, or associative array.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;e.g., &lt;code&gt;{ &amp;quot;name&amp;quot;: &amp;quot;John&amp;quot;, &amp;quot;age&amp;quot;:  30, &amp;quot;member&amp;quot;: false, &amp;quot;spouse&amp;quot;: { &amp;quot;firstName&amp;quot;: &amp;quot;Mary&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Smith&amp;quot;} }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ordered list of values.&lt;/p&gt;

&lt;p&gt;In various programming languages, it is called as array, vector, list, or sequence.
e.g., &lt;code&gt;[&amp;quot;John&amp;quot;,&amp;quot;Mary&amp;quot;,&amp;quot;Peter&amp;quot;,&amp;quot;Sally&amp;quot;]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;syntax-rules&#34;&gt;Syntax Rules&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Data is written as name/value pairs. &lt;code&gt;e.g., &amp;quot;name&amp;quot;:&amp;quot;John&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;note : &lt;em&gt;JSON names require double quotes. JavaScript object names don&amp;rsquo;t.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Data is seperated by commas. e.g., &lt;code&gt;&amp;quot;name&amp;quot;:&amp;quot;John&amp;quot;, &amp;quot;age&amp;quot;:30&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Curly braces hold objects.&lt;/p&gt;

&lt;p&gt;e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;John&amp;quot;,
  &amp;quot;age&amp;quot;: 30,
  &amp;quot;member&amp;quot;: false,
  &amp;quot;spouse&amp;quot;: { //object
    &amp;quot;first_name&amp;quot;: &amp;quot;Mary&amp;quot;,
    &amp;quot;last_name&amp;quot;: &amp;quot;Smith&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Square brackets hold arrays.&lt;/p&gt;

&lt;p&gt;e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;John&amp;quot;,
    &amp;quot;age&amp;quot;:  30,
    &amp;quot;member&amp;quot;: false,
    &amp;quot;phoneNumbers&amp;quot;: [ //array
        {
            &amp;quot;description&amp;quot;: &amp;quot;home&amp;quot;,
            &amp;quot;number&amp;quot;: &amp;quot;123-456-7890&amp;quot;
        },
        {
            &amp;quot;description&amp;quot;: &amp;quot;mobile&amp;quot;,
            &amp;quot;number&amp;quot;: &amp;quot;000-111-2222&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data-types&#34;&gt;Data Types&lt;/h3&gt;

&lt;p&gt;Values must be one of the following data types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a string
sequence of zero or more Unicode characters.
e.g., &lt;code&gt;{ &amp;quot;name&amp;quot;:&amp;quot;John&amp;quot; }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a number
Integer, Fraction and Exponent.
e.g., &lt;code&gt;{ &amp;quot;age&amp;quot;:30 }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;an object (JSON object)
starts and ends with &amp;lsquo;{&amp;rsquo; and &amp;lsquo;}&amp;rsquo;. a number of string value pairs can reside between.
Keys must be strings, and values must be a valid JSON data type.
e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
&amp;quot;employee&amp;quot;:{ &amp;quot;name&amp;quot;:&amp;quot;John&amp;quot;, &amp;quot;age&amp;quot;:30, &amp;quot;city&amp;quot;:&amp;quot;New York&amp;quot; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;an array
starts and ends with &amp;lsquo;[&amp;rsquo; and &amp;lsquo;]&amp;rsquo;. a number of values can reside between.
e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
&amp;quot;employees&amp;quot;:[ &amp;quot;John&amp;quot;, &amp;quot;Anna&amp;quot;, &amp;quot;Peter&amp;quot; ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a boolean
true or false. (TRUE or FALSE is not acceptable!).
e.g., &lt;code&gt;{ &amp;quot;accept&amp;quot;:true }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;null
null (NULL is not acceptable).
e.g., &lt;code&gt;{ &amp;quot;coupon&amp;quot;:null }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JSON values cannot be a function, a date or undefined. (In JavaScript you can have these values)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>