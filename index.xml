<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cse031sust02</title>
    <link>https://cse031sust02.github.io/index.xml</link>
    <description>Recent content on cse031sust02</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2017</copyright>
    <lastBuildDate>Wed, 17 May 2017 15:50:31 +0600</lastBuildDate>
    <atom:link href="https://cse031sust02.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting Started with Linux Command Line</title>
      <link>https://cse031sust02.github.io/post/linux-cheatsheet/</link>
      <pubDate>Wed, 17 May 2017 15:50:31 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/linux-cheatsheet/</guid>
      <description>

&lt;hr /&gt;

&lt;h2 id=&#34;what-is-linux&#34;&gt;What is Linux?&lt;/h2&gt;

&lt;p&gt;Just like Windows and Mac OS X, Linux is an operating system. It is an open source &lt;a href=&#34;https://en.wikipedia.org/wiki/Unix-like&#34;&gt;Unix-like&lt;/a&gt; operating system.&lt;/p&gt;

&lt;p&gt;Although Linux is generally used to refer to the entire OS, Linux is basically the name of the Kernel which was &lt;a href=&#34;https://github.com/torvalds/linux&#34;&gt;developed&lt;/a&gt; by &lt;a href=&#34;https://github.com/torvalds&#34;&gt;Linus Torvalds&lt;/a&gt;. I think &lt;a href=&#34;https://unix.stackexchange.com/a/94407&#34;&gt;this answer&lt;/a&gt; explains it all.&lt;/p&gt;

&lt;h2 id=&#34;linux-commands&#34;&gt;Linux Commands&lt;/h2&gt;

&lt;p&gt;We should have some basic ideas of &lt;strong&gt;Shell&lt;/strong&gt;, &lt;strong&gt;Bash&lt;/strong&gt; and &lt;strong&gt;Terminal&lt;/strong&gt; first if we want to work with Linux Command Line.&lt;/p&gt;

&lt;h4 id=&#34;shell&#34;&gt;Shell&lt;/h4&gt;

&lt;p&gt;The shell is a program that takes commands from the keyboard and gives them to the operating system to perform. Linux operating system offers several shells such as : &lt;strong&gt;bash&lt;/strong&gt;, &lt;strong&gt;sh&lt;/strong&gt;, &lt;strong&gt;csh&lt;/strong&gt; etc. Although they have many commands in common, each type has unique features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bash&lt;/strong&gt; (Bourne Again SHell)&lt;/p&gt;

&lt;p&gt;bash is the default shell for most &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_Linux_distributions&#34;&gt;Linux distributions&lt;/a&gt;. It is an enhanced version of the original Unix shell program.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;terminal&#34;&gt;Terminal&lt;/h4&gt;

&lt;p&gt;Terminal (or Terminal Emulator) is a GUI which lets us interact with the shell. So, we can type and execute commands from the Terminal Window.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There are many different Terminals bundled with different &lt;a href=&#34;https://en.wikipedia.org/wiki/Desktop_environment&#34;&gt;Desktop Environments&lt;/a&gt;, such as: gnome-terminal (GNOME), konsole(KDE) etc.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;working-with-the-terminal&#34;&gt;Working With the Terminal&lt;/h3&gt;

&lt;p&gt;We should easily find Terminal from the menu. The Terminal Window is like the image below&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://linuxcommand.org/images/Screenshot-Terminal.png&#34; alt=&#34;terminal&#34; title=&#34;Terminal&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;image src&lt;/strong&gt; : &lt;a href=&#34;http://linuxcommand.org/images/Screenshot-Terminal.png&#34;&gt;linuxcommand.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, when we open the Terminal, we see something like this :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;username@hostname:~$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;username&lt;/strong&gt; = the username of the current user.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;hostname&lt;/strong&gt; = name of the computer (to identify on the network).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;~&lt;/strong&gt; = name of the directory you’re in. &lt;em&gt;`~&amp;rsquo; refers to user&amp;rsquo;s home directory&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;$&lt;/strong&gt; =  It indicates the end of the shell prompt. if user is logged in as &lt;strong&gt;&lt;em&gt;root&lt;/em&gt;&lt;/strong&gt;, then it will show &amp;lsquo;#&amp;rsquo; sign instead of the &amp;lsquo;$&amp;rsquo; sign.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;root&#34;&gt;root?&lt;/h5&gt;

&lt;p&gt;In Linux, the root user is the superuser account. this is a special user account that has permission to do any task on a server. So, logged in as root can be potentially dangerous and we should not do that unless we really have to.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Still you need to know how do i login as root, right? you should able logged in as root by using the &lt;code&gt;su -&lt;/code&gt; command on your terminal. If you getting any error message, your root account is likely locked. please check &lt;a href=&#34;http://www.wikihow.com/Become-Root-in-Linux&#34;&gt;this tutorial&lt;/a&gt; for more information.&lt;/em&gt;&lt;/p&gt;

&lt;h5 id=&#34;sudo&#34;&gt;sudo?&lt;/h5&gt;

&lt;p&gt;As we understand, logged in as root can be potentially dangerous and we should try to avoid that. so, how can we execute the restricted commands when needed? the answer is &lt;code&gt;sudo&lt;/code&gt;. the &lt;code&gt;sudo&lt;/code&gt; command allows a permitted user to execute a command as the superuser or another user.&lt;/p&gt;

&lt;p&gt;for example, if we enter &lt;code&gt;apt-get update&lt;/code&gt; command in our terminal, we will get the following error,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;username@hostname:~$ apt-get update
E: Could not open lock file /var/lib/apt/lists/lock - open (13: Permission denied)
E: Unable to lock directory /var/lib/apt/lists/
E: Could not open lock file /var/lib/dpkg/lock - open (13: Permission denied)
E: Unable to lock the administration directory (/var/lib/dpkg/), are you root?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but, when we use &lt;code&gt;sudo&lt;/code&gt; in that same command, it works perfectly,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;username@hostname:~$ sudo apt-get update
[sudo] password for username: 
Ign http://dl.google.com stable InRelease
Hit http://packages.microsoft.com stable InRelease                             
Hit http://dl.google.com stable Release.gpg  
........
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;basic-commands&#34;&gt;Basic Commands&lt;/h3&gt;

&lt;p&gt;I think the best site to learn Linux Commands is &lt;a href=&#34;http://linuxcommand.org/lc3_lts0060.php&#34;&gt;linuxcommand.org&lt;/a&gt;. I am just trying to list some basics points.&lt;/p&gt;

&lt;h4 id=&#34;type-of-commands&#34;&gt;Type of Commands&lt;/h4&gt;

&lt;p&gt;There are four different kinds of Commands :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Executable program&lt;/strong&gt; : Any executable program. i.e : &lt;code&gt;vlc&lt;/code&gt;, &lt;code&gt;gedit&lt;/code&gt; etc&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Shell Builtin&lt;/strong&gt; : Builtin commands provided by Bash. i.e : &lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt; etc&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Shell function&lt;/strong&gt; : Functions of some commands.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Alias&lt;/strong&gt; : alias of any command.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;If we want to know the type of any command, we can use the &lt;code&gt;type&lt;/code&gt; command.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;navigation&#34;&gt;Navigation&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;pwd (print working directory)&lt;/li&gt;
&lt;li&gt;cd (change directory)&lt;/li&gt;
&lt;li&gt;ls (list files and directories)

&lt;ul&gt;
&lt;li&gt;ls -l (in long format)&lt;/li&gt;
&lt;li&gt;ls -a (including hidden files)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;manipulating-files&#34;&gt;Manipulating Files&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;cp (copy files and directories)&lt;/li&gt;
&lt;li&gt;mv (move or rename files and directories)&lt;/li&gt;
&lt;li&gt;rm (remove files and directories)&lt;/li&gt;
&lt;li&gt;mkdir (create directories)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;We need to understand &lt;a href=&#34;http://linuxcommand.org/lc3_lts0050.php&#34;&gt;Wildcards&lt;/a&gt; feature in order to make powerful commands.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;current-user&#34;&gt;Current User&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;whoami (show user name of current user)&lt;/li&gt;
&lt;li&gt;id (show user and group information)&lt;/li&gt;
&lt;li&gt;groups (groups that current user belongs to)&lt;/li&gt;
&lt;li&gt;passwd (changes password)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;permissions&#34;&gt;Permissions&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;chmod (modify file access rights)&lt;/li&gt;
&lt;li&gt;chown (change file ownership)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;We should understand &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-permissions&#34;&gt;Linux Permissions&lt;/a&gt; clearly.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;process&#34;&gt;Process&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;ps (list of running processes)&lt;/li&gt;
&lt;li&gt;kill (send a signal to processes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;We should have clear idea about Linux &lt;a href=&#34;http://www.tldp.org/LDP/tlk/kernel/processes.html&#34;&gt;Processes&lt;/a&gt; and &lt;a href=&#34;http://linuxcommand.org/lc3_lts0100.php&#34;&gt;Job Control&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;linux-filesystem&#34;&gt;Linux Filesystem&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s useful to understand Linux Filesystem. Below is a image to get a basic idea.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/T6T0sRW.png&#34; alt=&#34;File System&#34; title=&#34;File System&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Src : &lt;a href=&#34;http://imgur.com/gallery/1DH0O&#34;&gt;http://imgur.com/gallery/1DH0O&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To know more details, we can visit this &lt;a href=&#34;http://www.pathname.com/fhs/pub/fhs-2.3.html&#34;&gt;Filesystem Hierarchy Standard&lt;/a&gt; page.&lt;/p&gt;

&lt;h1 id=&#34;useful-links&#34;&gt;Useful Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://linuxcommand.org&#34;&gt;linuxcommand.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sh.howtocode.com.bd&#34;&gt;howtocode.com.bd&lt;/a&gt; (Bengali)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cheatsheetworld.com/programming/unix-linux-cheat-sheet/&#34;&gt;cheatsheetworld.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Say &#39;Hello&#39; to Node.js</title>
      <link>https://cse031sust02.github.io/post/say_hello_to_nodejs/</link>
      <pubDate>Sun, 07 May 2017 16:21:40 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/say_hello_to_nodejs/</guid>
      <description>

&lt;hr /&gt;

&lt;h3 id=&#34;what-is-node-js&#34;&gt;What is Node.js? :&lt;/h3&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Node.js® is a JavaScript runtime built on Chrome&amp;rsquo;s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js&amp;rsquo; package ecosystem, npm, is the largest ecosystem of open source libraries in the world.
- &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Official Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creepy, huh?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;npm&#34;&gt;npm?&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; is the Node.js package manager. It allows us to easily install modules and packages to use with Node.js.&lt;/p&gt;

&lt;h5 id=&#34;nvm&#34;&gt;nvm?&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/creationix/nvm/blob/master/README.md&#34;&gt;nvm&lt;/a&gt; is Node Version Manager. We can install multiple, self-contained versions of Node.js usng nvm. It allows us to control the environment easier (quickly switch to other versions of Node.js).&lt;/p&gt;

&lt;h3 id=&#34;installing-node-js&#34;&gt;Installing Node.js&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Please visit the &lt;a href=&#34;https://nodejs.org/en/download/package-manager/&#34;&gt;official page&lt;/a&gt; to install Node.Js in your platform.&lt;/p&gt;

&lt;h4 id=&#34;installing-on-ubuntu-14-04&#34;&gt;installing on Ubuntu 14.04&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;When i tried to install Node.Js with &lt;code&gt;apt-get install nodejs&lt;/code&gt; command in Ubuntu 14.04, it installed v0.10.25 instead of the latest version.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ubuntu 14.04 contains a version of Node.js in its default repositories. The version in the repositories is 0.10.25. This is not be the latest version, but it should be quite stable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To install recent version of Node.js, we will first add a PPA (personal package archive) maintained by &lt;a href=&#34;https://github.com/nodesource/distributions&#34;&gt;NodeSource&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;i.e, To download v6.X&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
$ sudo apt-get install -y nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Full details can be found &lt;a href=&#34;https://github.com/nodesource/distributions#installation-instructions&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To verify that the installation was successful, let’s give Node’s &lt;strong&gt;REPL&lt;/strong&gt; a try.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node
&amp;gt; console.log(&#39;hello nodejs&#39;);
hello world
undefined
&amp;gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*&lt;strong&gt;REPL&lt;/strong&gt; :  REPL (Read-Eval-Print Loop) is an interactive computer programming environment. It takes single user inputs, evaluates them, and returns the result to the user.&lt;/p&gt;

&lt;h6 id=&#34;install-npm&#34;&gt;install npm?&lt;/h6&gt;

&lt;p&gt;The nodejs package contains the nodejs binary as well as npm, so we don&amp;rsquo;t need to install npm separately.
But, to run nodejs/npm properly, We may need to install the &lt;code&gt;build-essentials&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install build-essential
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;about-npm-things&#34;&gt;About npm things&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; is a package manager for javascript. npm makes it easy for JavaScript developers to share and reuse code. Although npm started as the node package manager, but it is now used by almost every popular javascript libraries/frameworks. Please read the &lt;a href=&#34;https://docs.npmjs.com/getting-started&#34;&gt;official doc&lt;/a&gt; if you want to know more.&lt;/p&gt;

&lt;h6 id=&#34;what-is-a-package&#34;&gt;what is a package?&lt;/h6&gt;

&lt;p&gt;A package (or sometimes module) contains reusable codes to serve a particular purpose. A package is just a directory with one or more files in it.&lt;/p&gt;

&lt;p&gt;Every package contains a file named &lt;strong&gt;package.json&lt;/strong&gt; with some metadata (a short description, GitHub repository etc) about that package.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Module vs Package :
A module is anything that can be loaded with require() in a Node.js program. Most npm packages are modules. &lt;a href=&#34;https://docs.npmjs.com/how-npm-works/packages#most-npm-packages-are-modules&#34;&gt;more details..&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;npm-registry&#34;&gt;npm Registry?&lt;/h6&gt;

&lt;p&gt;Every time we download a package using npm install, we&amp;rsquo;re downloading it from npm Registry and put in our project&amp;rsquo;s &lt;code&gt;node_modules&lt;/code&gt; folder. npm Registry is basically a huge database containing each package&amp;rsquo;s files and associated metadata.&lt;/p&gt;

&lt;h4 id=&#34;initialize-a-project&#34;&gt;Initialize a project&lt;/h4&gt;

&lt;p&gt;npm helps us build projects, but for npm to be able to do that, we need to tell npm a little bit about our project. we have to write the details in &lt;strong&gt;package.json&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;we can manually create the &lt;strong&gt;package.json&lt;/strong&gt; file and write the details. Or we can use &amp;lsquo;npm init&amp;rsquo; command which will ask a bunch of questions, and then it will create the &lt;strong&gt;package.json&lt;/strong&gt; for us.&lt;/p&gt;

&lt;p&gt;i.e,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help json` for definitive documentation on these fields
and exactly what they do.

Use `npm install &amp;lt;pkg&amp;gt; --save` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
name: (demo-project) 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*the next time we use &lt;code&gt;npm init&lt;/code&gt; command, it will update the existing &lt;strong&gt;package.json&lt;/strong&gt; file.&lt;/p&gt;

&lt;h3 id=&#34;dealing-with-packages&#34;&gt;Dealing with packages&lt;/h3&gt;

&lt;p&gt;One of the most important things that npm does is install packages.&lt;/p&gt;

&lt;h4 id=&#34;install-packages&#34;&gt;#install packages&lt;/h4&gt;

&lt;p&gt;&amp;lsquo;npm install&amp;rsquo; can be used in many ways. By default, &lt;code&gt;npm install&lt;/code&gt; command (without any arguments) will install all modules listed as dependencies in &lt;strong&gt;package.json&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;To install a specific package,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*a &lt;strong&gt;package&lt;/strong&gt; can be a folder, a url, a git remote url etc.&lt;/p&gt;

&lt;p&gt;*If we install a package with &lt;code&gt;--save&lt;/code&gt; option, the package will be added to the dependencies list in the package.json file. so, afterwards, running &lt;code&gt;npm install&lt;/code&gt; will automatically install that package.&lt;/p&gt;

&lt;p&gt;We can istall packages &lt;strong&gt;locally&lt;/strong&gt; or &lt;strong&gt;globally&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;locally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By default &lt;code&gt;npm install&lt;/code&gt; will install modules locally. it downloads the package to &amp;lsquo;node_modules&amp;rsquo; directory. after we installed the package, we can use it in our code.&lt;/p&gt;

&lt;p&gt;for exmplae, first install the &lt;a href=&#34;https://lodash.com/&#34;&gt;lodash&lt;/a&gt; module locally,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install lodash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;now, we can use in our code,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  var lodash = require(&#39;lodash&#39;);
  var output = lodash.without([1, 2, 3], 1);
  console.log(output);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;globally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we want to use any package globally (usually to use it as a command line tool), then we can install those packages globally&lt;/p&gt;

&lt;p&gt;for example, install the &lt;a href=&#34;https://github.com/foreverjs/forever&#34;&gt;forever&lt;/a&gt; package globally.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo npm install forever -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;now, we can use this package in our terminal,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ forever start app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*for permission error, please check &lt;a href=&#34;https://docs.npmjs.com/getting-started/fixing-npm-permissions&#34;&gt;https://docs.npmjs.com/getting-started/fixing-npm-permissions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;list-of-installed-packages&#34;&gt;#list of installed packages&lt;/h4&gt;

&lt;p&gt;To show the installed packages, we can use the &lt;code&gt;npm list&lt;/code&gt; command.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;locally&lt;/strong&gt; installed packages,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ npm list --depth=0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;globally&lt;/strong&gt; installed packages,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm list -g --depth=0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;we can use &amp;lsquo;ls&amp;rsquo; instead of &amp;lsquo;list&amp;rsquo;. ie, &lt;code&gt;$ npm ls&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;depth = depth of the dependency tree.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;update-and-uninstall-existing-packages&#34;&gt;#update and uninstall existing packages&lt;/h4&gt;

&lt;p&gt;we can update any existing page with &lt;code&gt;npm update&lt;/code&gt; command and unistall packages with &lt;code&gt;npm unistall&lt;/code&gt; command.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;locally&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm update
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ npm unistall &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;globally&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; npm update -g &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; npm uninstall -g &amp;lt;package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;some-useful-links&#34;&gt;Some useful links&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.npmjs.com/#getting-started&#34;&gt;Official Getting Started Page&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://nodeschool.io/&#34;&gt;NodeSchool&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js?rq=1&#34;&gt;Stackoverflow post&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Composer</title>
      <link>https://cse031sust02.github.io/post/getting_started_with_composer/</link>
      <pubDate>Sun, 23 Apr 2017 17:37:13 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/getting_started_with_composer/</guid>
      <description>

&lt;hr /&gt;

&lt;h3 id=&#34;what-is-composer-https-getcomposer-org&#34;&gt;What is &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Composer is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
&lt;strong&gt;source&lt;/strong&gt; : &lt;a href=&#34;https://getcomposer.org/doc/00-intro.md&#34;&gt;getcomposer.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;why-use-composer&#34;&gt;Why Use Composer?&lt;/h5&gt;

&lt;p&gt;Suppose, we want to use a mail library for our PHP project, let&amp;rsquo;s say &lt;a href=&#34;https://github.com/PHPMailer/PHPMailer&#34;&gt;PHPMailer&lt;/a&gt;. We would normally download the PHPMailer library and put it on our project&amp;rsquo;s folder. But, PHPMailer depends on some other libraries too. So we need to download those libraries too. Now, those libraries depends on other libraries and the list goes on. This is where Composer comes in, It enables us to declare the libraries our project depends on. And Composer will handle the dependency resolution automatically. So, when we install PHPMailer using Composer, it will pull in all the required libraries, dependencies and manage them all in one place.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This kind of concept is not new, and in fact, Composer is strongly inspired by node&amp;rsquo;s &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; and ruby&amp;rsquo;s &lt;a href=&#34;http://bundler.io/&#34;&gt;bundler&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another benefit of using composer is avoid the pain of autloading. As we have all many different packages in our project, we need the ability to autoload them into our project. For libraries that specify autoload information, Composer generates a &amp;lsquo;vendor/autoload.php&amp;rsquo; file. We can simply include this file and start using the classes that those libraries provide without any extra work.&lt;/p&gt;

&lt;p&gt;Composer is used in all modern PHP frameworks (Symfony, Laravel etc).&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Composer requires PHP 5.3.2+ to run. To install composer on your system, just follow the &lt;a href=&#34;https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx&#34;&gt;official guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some useful commands :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;composer&lt;/code&gt; : list of available commands and description&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;composer -V&lt;/code&gt; : check current version&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;composer self-update&lt;/code&gt; : update to the latest version&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;composer help [command-name]&lt;/code&gt; : get help for that command&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;composer diagnose&lt;/code&gt; : check for common problems.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;using-composer&#34;&gt;Using Composer&lt;/h3&gt;

&lt;h5 id=&#34;project-setup&#34;&gt;Project Setup&lt;/h5&gt;

&lt;p&gt;To start using Composer in our project, all we need is a &lt;code&gt;composer.json&lt;/code&gt; file. This file describes the dependencies of our project (and may contain other metadata as well).&lt;/p&gt;

&lt;p&gt;For example, if we want to use &lt;a href=&#34;https://packagist.org/packages/phpmailer/phpmailer&#34;&gt;PHPMailer&lt;/a&gt; and &lt;a href=&#34;https://packagist.org/packages/monolog/monolog&#34;&gt;Monolog&lt;/a&gt;, we can create the following composer.json file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;require&amp;quot;: {
        &amp;quot;phpmailer/phpmailer&amp;quot;: &amp;quot;~5.2&amp;quot;,
        &amp;quot;monolog/monolog&amp;quot;: &amp;quot;*&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about &lt;code&gt;composer.json&lt;/code&gt; file, please see the &lt;a href=&#34;https://getcomposer.org/doc/01-basic-usage.md#composer-json-project-setup&#34;&gt;composer documentation&lt;/a&gt;. We also need to have a clear idea about &lt;a href=&#34;https://getcomposer.org/doc/articles/versions.md&#34;&gt;versions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;install-dependencies&#34;&gt;Install Dependencies&lt;/h5&gt;

&lt;p&gt;Then we can install the dependencies for our project simply with a &lt;code&gt;composer install&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;This will automatically download the dependencies into our project under the directory &amp;lsquo;vendor&amp;rsquo;.&lt;/p&gt;

&lt;h5 id=&#34;start-using-those-dependencies&#34;&gt;Start using those Dependencies&lt;/h5&gt;

&lt;p&gt;As stated before, Composer generates a &amp;lsquo;vendor/autoload.php&amp;rsquo; file. So, we can just include that file and start using the classes the installed libraries provide. for example :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;require __DIR__ . &#39;/vendor/autoload.php&#39;;

$log = new Monolog\Logger(&#39;name&#39;);
$log-&amp;gt;pushHandler(new Monolog\Handler\StreamHandler(&#39;app.log&#39;, Monolog\Logger::WARNING));
$log-&amp;gt;addWarning(&#39;Foo&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;update-dependencies&#34;&gt;Update Dependencies&lt;/h5&gt;

&lt;p&gt;Whenever we want to update our dependencies to latest versions, we can use this command &lt;code&gt;composer update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To update any single package only, the command will be : &lt;code&gt;composer update [package-name]&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;you-need-to-know&#34;&gt;You need to know&lt;/h3&gt;

&lt;h5 id=&#34;composer-install-vs-composer-update&#34;&gt;&amp;lsquo;composer install&amp;rsquo; vs &amp;lsquo;composer update&amp;rsquo;&lt;/h5&gt;

&lt;p&gt;To get a clear idea what actually happens when we use the &lt;code&gt;composer install&lt;/code&gt; &amp;amp; &lt;code&gt;composer update&lt;/code&gt; commands, please visit the &lt;a href=&#34;https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies&#34;&gt;official doc&lt;/a&gt;. I am trying to write the thing in my own way.&lt;/p&gt;

&lt;p&gt;if we run &lt;code&gt;composer install&lt;/code&gt; for the first time in our project,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Composer will download the dependencies (with defined versions) listed in &lt;strong&gt;composer.json&lt;/strong&gt; file.&lt;/li&gt;
&lt;li&gt;After installation is complete, Composer will create a file named &lt;strong&gt;composer.lock&lt;/strong&gt; to store information of all the downloaded packages and their versions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From next time, whenever we run &lt;code&gt;composer install&lt;/code&gt; command, Composer will download the dependencies listed on &lt;strong&gt;composer.json&lt;/strong&gt;, But it will use the &lt;em&gt;exact versions&lt;/em&gt; listed in &lt;strong&gt;composer.lock&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;So, if we change the &lt;strong&gt;composer.json&lt;/strong&gt; file (ie, add new package, chage version of any package etc) and then try to run the command &lt;code&gt;composer install&lt;/code&gt; command, it will show an warning.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Warning: The lock file is not up to date with the latest changes in composer.json. You may be getting outdated dependencies. Run update to update them.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So in that case, we have to use &lt;code&gt;composer update&lt;/code&gt; command. &lt;code&gt;composer update&lt;/code&gt; command fetches the latest matching versions (according to our &lt;strong&gt;composer.json&lt;/strong&gt; file) and update the composer.lock file with the new versions. This is equivalent to deleting the composer.lock file and running install again.&lt;/p&gt;

&lt;p&gt;So, we should only ever run &lt;code&gt;composer update&lt;/code&gt; to get the newest versions of our dependencies, not to install them.&lt;/p&gt;

&lt;h5 id=&#34;using-composer-require-command&#34;&gt;Using &lt;code&gt;composer require&lt;/code&gt; Command&lt;/h5&gt;

&lt;p&gt;In our example, We could define and install dependencies with a single &lt;a href=&#34;https://getcomposer.org/doc/03-cli.md#require&#34;&gt;&lt;code&gt;composer require&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt;

&lt;p&gt;for example :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ composer require phpmailer/phpmailer:5~5.2 monolog/monolog:*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;when we run &lt;code&gt;composer require&lt;/code&gt; command,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it adds new packages to the composer.json (If composer.json file does&amp;rsquo;nt exists, it will create one)&lt;/li&gt;
&lt;li&gt;the modified requirements will be installed or updated.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>So you want to start using Redis?</title>
      <link>https://cse031sust02.github.io/post/intro-to-redis/</link>
      <pubDate>Sat, 22 Apr 2017 16:13:16 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/intro-to-redis/</guid>
      <description>

&lt;hr /&gt;

&lt;h3 id=&#34;what-is-redis&#34;&gt;What is Redis? :&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Redis is an in-memory data structure server. Which can be used as database, cache and message broker.&lt;/p&gt;

&lt;p&gt;Redis = REmote DIctionary Server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a key-value store is commonly known today as a dictionary.
 &lt;a href=&#34;https://en.wikipedia.org/wiki/Key-value_database&#34;&gt;https://en.wikipedia.org/wiki/Key-value_database&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;data-structure-server&#34;&gt;- Data Structure Server&lt;/h6&gt;

&lt;p&gt;Data Structure is a particular way of organizing data. Redis is a data structure server. An important difference between Redis and other structured storage systems is that Redis supports not only strings, but also abstract data types.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;supported data structures&lt;/strong&gt; : strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;more details :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://redis.io/topics/data-types&#34;&gt;https://redis.io/topics/data-types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://redis.io/topics/data-types-intro&#34;&gt;https://redis.io/topics/data-types-intro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;popular-nosql-database&#34;&gt;- Popular noSQL Database&lt;/h6&gt;

&lt;p&gt;It is a very popular noSQL database. Redis is often ranked the &lt;a href=&#34;http://db-engines.com/en/ranking/key-value+store&#34;&gt;most popular key-value database&lt;/a&gt;.&lt;/p&gt;

&lt;h6 id=&#34;message-broker&#34;&gt;- Message Broker&lt;/h6&gt;

&lt;p&gt;a messaging broker is an intermediary for messaging. It gives applications a common platform to send and receive messages, and the messages are safe until received. Redis is a widely used use as Message Broker.&lt;/p&gt;

&lt;h3 id=&#34;why-use-redis&#34;&gt;Why use Redis?&lt;/h3&gt;

&lt;p&gt;Redis is a fantastic choice if you want a highly scalable data store shared by multiple processes, multiple applications, or multiple servers.&lt;/p&gt;

&lt;p&gt;You can found more detailed answers on &lt;a href=&#34;http://stackoverflow.com/a/13645017/7804179&#34;&gt;Stackoverflow&lt;/a&gt; or &lt;a href=&#34;https://www.quora.com/Why-use-Redis&#34;&gt;Quora&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;performances-benchmarks&#34;&gt;Performances &amp;amp; Benchmarks&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://redis.io/topics/benchmarks&#34;&gt;https://redis.io/topics/benchmarks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dwyl/learn-redis#performance--benchmarks&#34;&gt;https://github.com/dwyl/learn-redis#performance--benchmarks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;let-s-start&#34;&gt;Let&amp;rsquo;s Start&lt;/h3&gt;

&lt;hr /&gt;

&lt;h6 id=&#34;install&#34;&gt;Install&lt;/h6&gt;

&lt;p&gt;&lt;a href=&#34;http://redis.io/download#installation&#34;&gt;http://redis.io/download#installation&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&#34;try&#34;&gt;Try&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://try.redis.io/&#34;&gt;http://try.redis.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dwyl/learn-redis&#34;&gt;https://github.com/dwyl/learn-redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;all-commands&#34;&gt;All Commands&lt;/h6&gt;

&lt;p&gt;&lt;a href=&#34;https://redis.io/commands&#34;&gt;https://redis.io/commands&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&#34;cli&#34;&gt;CLI&lt;/h6&gt;

&lt;p&gt;After we install Redis on our local pc, we can start using the Redis CLI with the &lt;code&gt;redis-cli&lt;/code&gt; command,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli
127.0.0.1:6379&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;gui&#34;&gt;GUI&lt;/h6&gt;

&lt;p&gt;While Redis users heavily use the Command Line Interface (CLI), sometime we may like to use any Graphical User Interface (GUI). Here are some GUIs available for different platform.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Redis Commander
&lt;a href=&#34;https://github.com/joeferner/redis-commander&#34;&gt;https://github.com/joeferner/redis-commander&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Redismin
&lt;a href=&#34;https://www.redsmin.com/&#34;&gt;https://www.redsmin.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Redis Desktop Manager
&lt;a href=&#34;http://docs.redisdesktop.com/en/latest/&#34;&gt;http://docs.redisdesktop.com/en/latest/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Database &amp; ACID properties</title>
      <link>https://cse031sust02.github.io/post/database-acid/</link>
      <pubDate>Tue, 11 Apr 2017 11:13:09 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/database-acid/</guid>
      <description>

&lt;hr /&gt;

&lt;h3 id=&#34;database&#34;&gt;Database :&lt;/h3&gt;

&lt;p&gt;A database is a collection of data that is stored in an organized manner.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the term &amp;ldquo;database&amp;rdquo; is often used casually to refer to both a database and the DBMS used to manipulate it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;database-models&#34;&gt;Database Models :&lt;/h3&gt;

&lt;p&gt;A database model refers to the logical structure, representation or layout of a database and how the data will be stored, managed and processed within it.&lt;/p&gt;

&lt;p&gt;There are many kinds of data models. Such as Relational model, Network model, Entity-attribute-value model, Object-oriented database model and many more..&lt;/p&gt;

&lt;p&gt;DBMS popularity broken down by database model : &lt;a href=&#34;http://db-engines.com/en/ranking&#34;&gt;http://db-engines.com/en/ranking&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;dbms-rdbms&#34;&gt;DBMS &amp;amp; RDBMS :&lt;/h3&gt;

&lt;p&gt;DBMS stands for Database Management System. It is the software application to store and manage the data.&lt;/p&gt;

&lt;p&gt;RDBMS stands for Relational Database Management System. It is based on the relational model. The relational model has relationship between tables using primary keys, foreign keys and indexes.&lt;/p&gt;

&lt;p&gt;Example : MySQL, PostgreSQL, MongoDB, Microsoft SQL Server, Oracle etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can say that a RDBMS is an in an extension of a DBMS. The key difference is that RDBMS applications store data in a tabular form, while DBMS applications store data as files. Does that mean there are no tables in a DBMS? There can be, but there will be no “relation” between the tables, like in a RDBMS.&lt;/p&gt;

&lt;p&gt;src - &lt;a href=&#34;https://blog.udemy.com/differences-between-dbms-and-rdbms/&#34;&gt;https://blog.udemy.com/differences-between-dbms-and-rdbms/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most software products in the market today are both DBMS and RDBMS compliant.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;what-is-acid&#34;&gt;What is ACID? :&lt;/h3&gt;

&lt;p&gt;ACID is a set of properties of database transactions (a single logical operation on the data is called a transaction).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Atomicity&lt;/strong&gt; :  If one part of the transaction fails, then the entire transaction fails, and the database state is left unchanged.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consistency&lt;/strong&gt; : Any data written to the database must be valid according to all defined rules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Isolation&lt;/strong&gt; : One transaction cannot read data from another transaction that is not yet completed. If two transactions are executing concurrently, each one will see the world as if they were executing sequentially, and if one needs to read data that is written by another, it will have to wait until the other is finished.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Durability&lt;/strong&gt; : Once a transaction is complete, it is guaranteed that all of the changes have been recorded to a durable medium (such as a hard disk).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://s3-us-west-1.amazonaws.com/morpheus-staging/system/spud_media/332/original/acidoverwiew.png?1422558433&#34; alt=&#34;Foo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source :&lt;/strong&gt; &lt;a href=&#34;https://www.morpheusdata.com/blog/2015-01-29-when-do-you-need-acid-compliance-&#34;&gt;morpheusdata&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;acid-compliants&#34;&gt;ACID compliants :&lt;/h3&gt;

&lt;p&gt;Oracle is ACID compliant.&lt;/p&gt;

&lt;p&gt;PostgreSQL is &lt;a href=&#34;https://www.postgresql.org/about&#34;&gt;ACID compliant&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MySQL is not an ACID compliant database server by design, but if you use the InnoDB storage engine for your tables, you will be able to perform transaction-safe operations on your database. Source : &lt;a href=&#34;http://stackoverflow.com/questions/4264849/how-to-implement-the-acid-model-for-a-database&#34;&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Personal Git Cheat Sheet</title>
      <link>https://cse031sust02.github.io/post/git-cheatsheet/</link>
      <pubDate>Tue, 11 Apr 2017 11:11:48 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/git-cheatsheet/</guid>
      <description>

&lt;hr /&gt;

&lt;h3 id=&#34;what-is-git&#34;&gt;What is GIT?&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Git is a free and open source distributed version control system.&lt;/p&gt;

&lt;p&gt;Why we use VCS (version control system)?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code Revision&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Like a Time Machine&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Multiple Developer&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why GIT (among other VCS)?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can work locally without any central server&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;install&#34;&gt;Install&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;configuration&#34;&gt;Configuration&lt;/h4&gt;

&lt;p&gt;Use &lt;strong&gt;&lt;code&gt;git config&lt;/code&gt;&lt;/strong&gt; command to get and set configuration variables&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Config file locations&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;ndash;system : configuaration for every user on the system(OS) and all their repositories.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ndash;global : configuarations specific to your user. (OS user)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ndash;local : configuarations for current repository.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Set Config&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ git config --global user.name &amp;quot;John Doe&amp;quot;
$ git config --global user.email &amp;quot;johndoe@example.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Get Config&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ git config --list
$ git config --global --list
$ git config --system --list
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Extra&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html&#34;&gt;What&amp;rsquo;s Inside .git Directory?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Editor&lt;/strong&gt; : By default, Git uses whatever you’ve set as your default text editor ($VISUAL or $EDITOR) or else falls back to the vi editor to create and edit your commit and tag messages.for example, to use Sublime as the editor, &lt;code&gt;git config --global core.editor &amp;quot;subl -n -w&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;aliases&lt;/strong&gt; : we can also easily set up an alias for each command using git config.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;initialization-create-a-new-repository&#34;&gt;Initialization (create a new repository)&lt;/h4&gt;

&lt;p&gt;To initialize git on a project, simply use &lt;code&gt;git init&lt;/code&gt; command.
( &lt;em&gt;a hidden folder named &lt;code&gt;.git&lt;/code&gt; will be created in the project&amp;rsquo;s root directory&lt;/em&gt; )&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To get a copy of an existing Git repository, use the &lt;code&gt;git clone&lt;/code&gt; command.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;lifecycle&#34;&gt;Lifecycle&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://git-scm.com/book/en/v2/book/02-git-basics/images/lifecycle.png&#34; alt=&#34;Lifecycle&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;source&lt;/strong&gt; : &lt;a href=&#34;https://git-scm.com/book/en/v2/book/02-git-basics/images/lifecycle.png&#34;&gt;https://git-scm.com/book/en/v2/book/02-git-basics/images/lifecycle.png&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Files has mainly 4 statuses :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;untracked&lt;/strong&gt; : at first any new file is untracked.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ndash;&amp;gt; use &lt;code&gt;git add&lt;/code&gt; command to stage the file&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;staged&lt;/strong&gt; : after we use &amp;lsquo;git add&amp;rsquo; command, the file is statged.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ndash;&amp;gt; use &lt;code&gt;git commit&lt;/code&gt; command to commit the staged file&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lt;&amp;ndash; use &lt;code&gt;git reset HEAD&lt;/code&gt; command to unstage that file&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;unchanged&lt;/strong&gt; : If the file is not changed since its last commit, the file is unchanged.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;unstaged&lt;/strong&gt; : If there is any modification to that staged or unchanged file, that file becomes &lt;code&gt;unstaged&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ndash;&amp;gt; again use &lt;code&gt;git add&lt;/code&gt; command to stage that file&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lt;&amp;ndash; use &lt;code&gt;git checkout&lt;/code&gt; command to discard changes&lt;/em&gt; *&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;&lt;code&gt;git checkout&lt;/code&gt; is a dangerous command! Use stash instead.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;basic-commands&#34;&gt;Basic Commands&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;git-add&#34;&gt;git add&lt;/h4&gt;

&lt;p&gt;Use &lt;code&gt;git add&lt;/code&gt; command to track the untracked files (put it on the stage).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;add single file : &lt;code&gt;git add file.ext&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add all files : &lt;code&gt;git add .&lt;/code&gt; or &lt;code&gt;git add -A&lt;/code&gt; . &lt;a href=&#34;http://stackoverflow.com/questions/572549/difference-between-git-add-a-and-git-add&#34;&gt;Difference?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;git-commit&#34;&gt;git commit&lt;/h4&gt;

&lt;p&gt;Commits the staged snapshot to the project history.&lt;/p&gt;

&lt;p&gt;Different ways to commit,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;commit all staged files : &lt;code&gt;$ git commit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This will open an editor, write your commit message and exit. To write the commit message directly in command line, use the &lt;code&gt;-m&lt;/code&gt; flag. e.g, &lt;code&gt;$ git commit -m &amp;quot;My Commit Message&amp;quot;&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;commit all staged and unstaged files : &lt;code&gt;$ git commit -am &amp;quot;commit message&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;when we use &amp;lsquo;-a&amp;rsquo; flag, it includes all changed files. Git will automatically stage every unstaged files before doing the commit. note that, untracked files will not be commited using this command.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;commit single file :  &lt;code&gt;$ git commit -m &amp;quot;commit message&amp;quot; FILE_NAME&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;commit multiple files : &lt;code&gt;git commit -m &amp;quot;commit message&amp;quot; FILE1, FILE2..&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ammend the previous commit : &lt;code&gt;git commit --amend&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;e.g,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit -m &#39;initial commit&#39;
$ git add forgotten_file
$ git commit --amend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*&lt;em&gt;do not use `&amp;ndash;amend&amp;rsquo; if you already pushed your commit.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;git-log&#34;&gt;git log&lt;/h4&gt;

&lt;p&gt;Show commit logs&lt;/p&gt;

&lt;p&gt;use &lt;code&gt;git log&lt;/code&gt; command to show all the commits from the very beginning (for currently active branch).&lt;/p&gt;

&lt;p&gt;e.g,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;commit 1cddaa29ad059a6083e776cc3e4b950e6487f236
Author: Talha Ibne Imam &amp;lt;talha@bscheme.com&amp;gt;
Date:   Sat Apr 22 12:26:11 2017 +0600

    Registration Complete

commit eea5997a17f02e78d78ccf69a233123192a73822
Author: Talha Ibne Imam &amp;lt;talha@bscheme.com&amp;gt;
Date:   Thu Apr 20 14:13:18 2017 +0600

    Design Complete

commit 178d3c00a5e55cd0f6ba0170a9dd58dda24561cf
Author: Talha Ibne Imam &amp;lt;talha@bscheme.com&amp;gt;
Date:   Thu Apr 20 11:35:36 2017 +0600

    First Commit

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are many different options avalaible for showing logs in different ways.&lt;/p&gt;

&lt;p&gt;for example,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Most recent commits : &lt;code&gt;git log -3&lt;/code&gt; (last 3 commits)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Show commits in one line : &lt;code&gt;git log --pretty=oneline&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Show commits for a specific file : &lt;code&gt;git log test.txt&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Show commits by any specific author : &lt;code&gt;git log --author=talha&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Show in a pretty format : &lt;code&gt;git log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&#39; --abbrev-commit --date=relative&lt;/code&gt; [&lt;em&gt;src : &lt;a href=&#34;https://coderwall.com/lordmonkey/comments&#34;&gt;Coderwall&lt;/a&gt;&lt;/em&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;for more details, please use the command &lt;code&gt;git log --help&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;git-show&#34;&gt;git show :&lt;/h4&gt;

&lt;p&gt;Shows the changes of a particular commit*&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git show COMMIT_HASH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*&lt;em&gt;only first 4-5 character of COMMIT_HASH is enough!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If we do not specify COMMIT_HASH, then it will show changes from HEAD. (HEAD is a reference to the last commit in the currently checked-out branch.)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;*&lt;code&gt;git show&lt;/code&gt; can be used to show other objects rather than commits. such as tags, trees etc. for more details, please visit &lt;a href=&#34;https://git-scm.com/docs/git-show&#34;&gt;official link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;git-diff&#34;&gt;git diff:&lt;/h4&gt;

&lt;p&gt;Show changes between commits, commit and working tree, etc&lt;/p&gt;

&lt;p&gt;we usually use the &lt;code&gt;git status&lt;/code&gt; command to see which files were currently changed. To understand how they were changed in detail, we can use &lt;code&gt;git diff&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/strong&gt; : show changes only that are unstaged.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;all unstaged files : &lt;code&gt;$ git diff&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;single unstaged file : &lt;code&gt;$ git diff FILENAME&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;multiple unstaged file : &lt;code&gt;$ git diff FILE1 FILE2&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;git diff --staged&lt;/code&gt;&lt;/strong&gt; : show changes only that are staged.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;all staged files : &lt;code&gt;$ git diff --staged&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;single staged file : &lt;code&gt;$ git diff --staged FILENAME&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;multiple staged file : &lt;code&gt;$ git diff --staged FILE1 FILE2&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;we can use &lt;code&gt;--cached&lt;/code&gt; instead of &lt;code&gt;--staged&lt;/code&gt; (&lt;code&gt;--staged&lt;/code&gt; is a synonym of &lt;code&gt;--cached&lt;/code&gt;).&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;git diff HEAD&lt;/code&gt;&lt;/strong&gt; : show changes that are tracked (staged + unstaged).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;working-remotely&#34;&gt;Working Remotely&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;git-remote&#34;&gt;git remote:&lt;/h4&gt;

&lt;p&gt;Manage repositories&lt;/p&gt;

&lt;p&gt;To collaborating with other developers, we need to manage remote repositories and pushing and pulling data to and from.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;show list with names : &lt;code&gt;git remote -v&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add new remote : &lt;code&gt;git remote add [remote-name] &amp;lt;url&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;update a remote&amp;rsquo;s url: &lt;code&gt;git remote set-url [remote-name] [new-url]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;remove a remote : &lt;code&gt;git remote rm [remote-name]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;git-push&#34;&gt;git push:&lt;/h4&gt;

&lt;p&gt;Push commits to remote repository&lt;/p&gt;

&lt;p&gt;After we made some commits, we might want to push them to a remote repository. this can be done with a &lt;code&gt;git push [remote-name] [branch-name]&lt;/code&gt; command. ie, &lt;code&gt;git push origin master&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;git-pull&#34;&gt;git pull:&lt;/h4&gt;

&lt;p&gt;Fetch and merge remote changes.&lt;/p&gt;

&lt;p&gt;perform a pull can be done simply with a &lt;code&gt;git pull&lt;/code&gt; command.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h5 id=&#34;git-fetch-vs-git-pull&#34;&gt;&amp;lsquo;git fetch&amp;rsquo;  vs  &amp;lsquo;git pull&amp;rsquo; :&lt;/h5&gt;

&lt;p&gt;In its default mode, &lt;code&gt;git pull&lt;/code&gt; is shorthand for &lt;code&gt;git fetch&lt;/code&gt; followed by &lt;code&gt;git merge FETCH_HEAD&lt;/code&gt;. src : &lt;a href=&#34;https://git-scm.com/docs/git-pull&#34;&gt;https://git-scm.com/docs/git-pull&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;more details : &lt;a href=&#34;http://stackoverflow.com/a/7104747/7804179&#34;&gt;http://stackoverflow.com/a/7104747/7804179&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Cookie</title>
      <link>https://cse031sust02.github.io/post/intro-to-cookie/</link>
      <pubDate>Tue, 11 Apr 2017 11:11:22 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/intro-to-cookie/</guid>
      <description>

&lt;hr /&gt;

&lt;h3 id=&#34;what-is-a-http-cookie&#34;&gt;What is a HTTP Cookie?&lt;/h3&gt;

&lt;p&gt;Cookies are small files that is sent from a website(server) and stored on users&amp;rsquo;s computer by a browser.&lt;/p&gt;

&lt;p&gt;It is also called web cookie, Internet cookie, browser cookie or simply cookie.&lt;/p&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;Cookies are mainly used for these purposes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Session management (user logins, shopping carts)&lt;/li&gt;
&lt;li&gt;Personalization (user preferences)&lt;/li&gt;
&lt;li&gt;Tracking (analyzing user behavior)
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;source : &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies&#34;&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-server-client-sends-cookie&#34;&gt;How server/client sends cookie?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Server to Browser&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The server tells the client (Browser) to store a cookie using the Set-Cookie HTTP header.&lt;/p&gt;

&lt;p&gt;for example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.0 200 OK
Content-type: text/html
Set-Cookie:&amp;quot;MyCookieName=MyValue; expires=Tue, 11-Apr-2016 09:22:03 GMT; Max-Age=3600&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;expires date time is in GMT.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if expire time is omitted, the cookie will expire at the end of the session (when the browser closes). These type of cookies are called &amp;lsquo;session cookies&amp;rsquo;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To set cookie using &lt;a href=&#34;http://php.net/manual/en/function.setcookie.php&#34;&gt;php&lt;/a&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;setcookie(&amp;quot;mycookie&amp;quot;, &#39;20seconds&#39;, time()+20);  /* expire in 20 second */
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Browser to the server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The browser will send back all previously stored cookies to the server using the Cookie header.&lt;/p&gt;

&lt;p&gt;for example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /my_page.html HTTP/1.1
Host: www.example.com
Cookie: MyCookieName=MyValue 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details, please check &lt;a href=&#34;http://www.cookiecentral.com/faq/#3.2&#34;&gt;http://www.cookiecentral.com/faq/#3.2&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;secuirity&#34;&gt;Secuirity&lt;/h3&gt;

&lt;p&gt;Confidential or sensitive information should never be stored or transmitted in HTTP Cookies as the entire mechanism is inherently insecure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exception Handling with PHP</title>
      <link>https://cse031sust02.github.io/post/exception-handling-with-php/</link>
      <pubDate>Mon, 10 Apr 2017 15:56:44 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/exception-handling-with-php/</guid>
      <description>

&lt;hr /&gt;

&lt;h3 id=&#34;what-is-exception&#34;&gt;What is Exception&lt;/h3&gt;

&lt;p&gt;Exception is an error condition which change the normal flow of code execution. Exceptions are catchable. That means, we can catch and try to recover or continue with the execution of the program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lsquo;errors&amp;rsquo; vs &amp;lsquo;exceptions&amp;rsquo; :&lt;/strong&gt;
Generally errors occur at the language level (ie, the syntax is wrong, missing parenthesis etc)&lt;/p&gt;

&lt;h3 id=&#34;exceptions-in-php&#34;&gt;Exceptions in PHP&lt;/h3&gt;

&lt;p&gt;Exceptions were introduced in PHP 5. It is used in an object oriented way. The exception model of PHP is very similar to exception model of other programming languages.&lt;/p&gt;

&lt;p&gt;Exceptions can be thrown and caught.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;one basic example,&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;  try {
    throw new Exception(&#39;An Exception&#39;);
  } catch (Exception $e) {
    echo $e-&amp;gt;getMessage();
  }
  //output : An Exception
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;throw&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The thrown object must be an instance of the Exception class (or a subclass of Exception). Otherwise, there will be a PHP Fatal Error.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;try&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If there is a &amp;lsquo;try&amp;rsquo; block, then there must be atleast one &amp;lsquo;catch&amp;rsquo; or &amp;lsquo;finally&amp;rsquo; block. (Otherwise PHP Fatal Error)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;catch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When an exception is thrown, code following the statement will not be executed, and PHP will attempt to find the first matching catch block. If an exception is not caught (either by &amp;lsquo;catch&amp;rsquo; or &amp;lsquo;finally&amp;rsquo; block), there will be a PHP Fatal Error with an &amp;ldquo;Uncaught Exception &amp;hellip;&amp;rdquo; message (unless a handler has been defined with set_exception_handler method).&lt;/p&gt;

&lt;p&gt;Exceptions can also be thrown (or re-thrown) within a catch block.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;finally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Introduces in PHP 5.5. &amp;lsquo;finally&amp;rsquo; block can be used after or instead of catch blocks. Code within the finally block will ALWAYS be executed after the try and catch blocks ( regardless of whether an exception has been thrown or not)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;another example with more details,&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function inverse($number) {
    if ($number==0) {
        throw new Exception(&#39;Division by zero.&#39;);
    }

    return 1/$number;
}

try {
    $random_number = rand(0,5);
    $result = inverse($random_number);
    // ONLY echo when no exception is thrown
    echo $result;
} catch (Exception $e) {
    //ONLY echo if there is an exception
    echo &amp;quot;Exception Message :&amp;quot;.$e-&amp;gt;getMessage();
} finally {
    // always echo
    echo &amp;quot;I am always there&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note : Internal PHP functions mainly use Error reporting, only modern Object oriented extensions use exceptions. However, errors can be simply translated to exceptions with ErrorException. - &lt;a href=&#34;http://php.net/manual/en/language.exceptions.php&#34;&gt;php.net&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Accepting payments on your site using Stripe</title>
      <link>https://cse031sust02.github.io/post/payment-using-stripe/</link>
      <pubDate>Mon, 10 Apr 2017 15:27:28 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/payment-using-stripe/</guid>
      <description>

&lt;hr /&gt;

&lt;h4 id=&#34;what-is-stripe-https-stripe-com&#34;&gt;What is &lt;a href=&#34;https://stripe.com/&#34;&gt;Stripe&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;A popular payment processor. It accepts payments from customers around the world on web or in mobile apps.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;payment-types&#34;&gt;Payment types&lt;/h4&gt;

&lt;p&gt;Stripe accepts all major debit and credit cards in 100+ currencies. It also supports bank and direct debit payments, local payment wallets, Alipay and cryptocurrency (Bitcoin) etc.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;accepting-payments-with-cards&#34;&gt;Accepting Payments with Cards&lt;/h4&gt;

&lt;p&gt;Using card information with Stripe is a two-step process&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Securely collect payment information using tokenization&lt;/li&gt;
&lt;li&gt;Use the payment information in a charge request or save it for later&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Step 1. Securely collect payment information using tokenization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Stripe provides three methods for tokenizing customer’s payment information over HTTPS
Checkout, Stripe.js &amp;amp; Mobile SDKs&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://stripe.com/checkout&#34;&gt;Checkout&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to integrate Stripe is via Checkout, an embedded tool that takes care of building an HTML form, validating user input, and securing your customers&amp;rsquo; card data. Using Checkout, sensitive credit card information is sent directly to Stripe, and does not touch your server. customers can pay instantly, without being redirected away to complete the transaction.&lt;/p&gt;

&lt;p&gt;In addition to credit and debit cards, Checkout supports Alipay and Bitcoin too. more types of payment coming soon.&lt;/p&gt;

&lt;p&gt;Checkout has 12 languages to pay with a localized experience.&lt;/p&gt;

&lt;p&gt;Embedding checkout in your site
&lt;a href=&#34;https://stripe.com/docs/checkout/tutorial&#34;&gt;https://stripe.com/docs/checkout/tutorial&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://stripe.com/docs/quickstart#elements&#34;&gt;Elements&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to customize the payment form for our need, then we can make use of Stripe Elements.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://stripe.com/docs/mobile&#34;&gt;Mobile SDKs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Step 2. Use the tokenized payment information&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While a token is created on the first step, now the token is used by our server-side to make an API request to Stripe. Two common examples of when you would use a token are,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Charging the customer immediately&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can create a one-time charge request to charge a customer’s card.
The API request will contain the token, currency, amount to charge, and any additional information we may want to pass. &lt;a href=&#34;https://stripe.com/docs/quickstart#charge-immediately&#34;&gt;more details..&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Saving the customer’s card information&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we’d like to have the ability to charge the customers again in future (without them needing to enter their payment information again), we can create an API request to store their payment details inside a customer record instead. &lt;a href=&#34;https://stripe.com/docs/quickstart#saving-card-information&#34;&gt;more details..&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>HTTP প্রোটোকল  এর বেসিক কাহিনী!</title>
      <link>https://cse031sust02.github.io/post/protocol-basics/</link>
      <pubDate>Mon, 10 Apr 2017 11:31:28 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/protocol-basics/</guid>
      <description>

&lt;hr /&gt;

&lt;h4 id=&#34;tcp-ip&#34;&gt;TCP/IP&lt;/h4&gt;

&lt;p&gt;TCP = Transmission Control Protocol&lt;/p&gt;

&lt;p&gt;IP = Internet Protocol&lt;/p&gt;

&lt;p&gt;TCP/IP হলো একটা Protocol Suite.&lt;/p&gt;

&lt;p&gt;TCP/IP = TCP + IP + more protocols ..&lt;/p&gt;

&lt;p&gt;WWW ( World Wide Web ) এ Browser গুলা Server এর সাথে connect করার জন্য TCP use করে।
HTTP, HTTPS, SMTP, FTP ইত্যাদি protocol গুলা তাদের কাজের জন্য  TCP কে use করে।&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;http-hypertext-transfer-protocol&#34;&gt;HTTP (HyperText Transfer Protocol)&lt;/h4&gt;

&lt;p&gt;HTTP হলো একটা request-response stateless protocol যার মাধ্যমে Client এবং Server পরস্পর Communicate করতে পারে।&lt;/p&gt;

&lt;p&gt;Client টা Server এর কাছে Request পাঠায় , Server সেইটার Response পাঠায়।&lt;/p&gt;

&lt;h6 id=&#34;request-message-এর-format&#34;&gt;Request Message এর Format&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;Request Line 
Request Header fields
Empty Line 
An Optional Message Body
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /index.html HTTP/1.1
Host : www.example.com 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;GET হলো Method, index.html হলো Requested File, Http/1.1 হলো HTTP Version&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;response-message-এর-format&#34;&gt;Response Message এর Format&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;Status  Line 
Response Header Fields 
Empty Line 
An Optional Message Body
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTTP/1.1 = HTTP Version, 200 = Status Code, OK = reason message&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Header fields এর সম্পর্কে জানতে &lt;a href=&#34;http://en.wikipedia.org/wiki/List_of_HTTP_header_fields&#34;&gt;Wikipedia&lt;/a&gt; তে দেখুন&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;সুতরাং , আমরা যখন ব্রাউজার এ &lt;code&gt;www.example.com/blog.php&lt;/code&gt; লিখে এন্টার করি,  ব্রাউজার (Client) টা Server কে আসলে এরকম একটা request করে,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET  /blog.php HTTP/1.1 
Host : www.example.com 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;আর Server এর response টা এরকম,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.0 200 OK
Date: Tue, 26 May 2015 23:59:59 GMT
Content-Type: text/html
Content-Length: 1202 

&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Blog&amp;lt;/h1&amp;gt;
  content goes here 
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;http-methods-verbs&#34;&gt;HTTP Methods/Verbs&lt;/h4&gt;

&lt;p&gt;Resource এ কি টাইপের action করতে চাই সেটা indicate করার জন্য কিছু method আছে ।
common method গুলা হলো  GET, POST, PUT, DELETE .&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;status-codes&#34;&gt;Status Codes&lt;/h4&gt;

&lt;p&gt;Informational : 1XX &amp;ndash; request recieve হইসে, process চলসে ।&lt;/p&gt;

&lt;p&gt;Successfull : 2XX &amp;ndash; client এর request succssfully receive করা হইসে।&lt;/p&gt;

&lt;p&gt;Redirectional : 3XX &amp;ndash; Client এর extra কিছু করতে হবে, mostly redirected ।&lt;/p&gt;

&lt;p&gt;Client Error : 4XX &amp;ndash; Client কোন error করছে ।&lt;/p&gt;

&lt;p&gt;Server Error : 5XX &amp;ndash; Server এ কোন সমস্যা আছে।&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;https-hypertext-transfer-protocol-secure&#34;&gt;HTTPS ( HyperText Transfer Protocol Secure )&lt;/h4&gt;

&lt;p&gt;HTTPS = HTTP + SSL (Secure Socket Layer)&lt;/p&gt;

&lt;p&gt;এটা HTTP এর উপরে একটা Layer (SSL/TLS Protocol) দিয়ে বানানো যেটা HTTP Communication এ কিছু secuirity যোগ করে।
এটার মেইন উদ্দেশ্য হলো Wiretapping আর Man-in-the-middle-attack থেকে protect করা।&lt;/p&gt;

&lt;p&gt;HTTPS এ Server ও Client গুলা  HTTP এর মতই communicate করে কিন্তু communication টা একটা Secure SSL connection এর উপরে হয় যেটা request এবং response টাকে encrypt/decrypt করে।&lt;/p&gt;

&lt;p&gt;SSL টার mainly ২ টা কাজ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;এইটা verify করা যে Client টা Directly Server এর সাথেই communicate করতেছে &lt;/li&gt;&lt;/li&gt;
&lt;li&gt;এইটা ensure করা যে client ও  server এর মধ্যকার কথাবার্তা শুধু client ও server ই পরতে পারতেছে&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTPS এ header, message সবই encrypted থাকে।&lt;/p&gt;

&lt;p&gt;কোন site কে যদি আমরা HTTPS use করে secure করতে চাই তাহলে পুরা site টাকেই HTTPS এ host করতে হবে। এমন না যে কিছু page এ শুধু  করব।&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://cse031sust02.github.io/post/json/</link>
      <pubDate>Sun, 09 Apr 2017 18:15:22 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/json/</guid>
      <description>

&lt;hr /&gt;

&lt;h4 id=&#34;what-is-json&#34;&gt;What is JSON?&lt;/h4&gt;

&lt;p&gt;JSON stands for JavaScript Object Notation.&lt;/p&gt;

&lt;p&gt;Douglas Crockford originally specified the JSON format in the early 2000s. Altohugh it derives from JavaScript, but as of 2017 many programming languages include code to generate and parse JSON-format data.&lt;/p&gt;

&lt;p&gt;JSON filenames use the extension .json.&lt;/p&gt;

&lt;p&gt;The official internet media type for JSON is &amp;lsquo;application/json&amp;rsquo;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;why-use-json&#34;&gt;Why Use JSON?&lt;/h4&gt;

&lt;p&gt;Because It is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lightweight data-interchange format.&lt;/li&gt;
&lt;li&gt;language independent&lt;/li&gt;
&lt;li&gt;&amp;ldquo;self-describing&amp;rdquo; and easy to understand by both humans (to understand) and machines (to parse and generate).&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;usage&#34;&gt;USAGE?&lt;/h4&gt;

&lt;p&gt;JSON is heavily used in these areas : API, NoSQL, AJAX, Package Management (Composer, NPM, Bower etc)&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;why-better-than-xml&#34;&gt;Why better than XML?&lt;/h4&gt;

&lt;p&gt;JSON is faster and easier than XML. It is parsed very easily into a ready-to-use JavaScript object while XML is much more difficult to parse.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;data-structure-rules&#34;&gt;Data Structure &amp;amp; Rules&lt;/h4&gt;

&lt;p&gt;The JSON syntax is a subset of the JavaScript syntax.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Structures&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JSON is defined by two basic structures.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A collection of name/value pairs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Different programming languages support this data structure in different names. Like object, record, struct, dictionary, hash table, keyed list, or associative array.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;e.g., &lt;code&gt;{ &amp;quot;name&amp;quot;: &amp;quot;John&amp;quot;, &amp;quot;age&amp;quot;:  30, &amp;quot;member&amp;quot;: false, &amp;quot;spouse&amp;quot;: { &amp;quot;firstName&amp;quot;: &amp;quot;Mary&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Smith&amp;quot;} }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ordered list of values.&lt;/p&gt;

&lt;p&gt;In various programming languages, it is called as array, vector, list, or sequence.
e.g., &lt;code&gt;[&amp;quot;John&amp;quot;,&amp;quot;Mary&amp;quot;,&amp;quot;Peter&amp;quot;,&amp;quot;Sally&amp;quot;]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Syntax Rules&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Data is written as name/value pairs. &lt;code&gt;e.g., &amp;quot;name&amp;quot;:&amp;quot;John&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;note : &lt;em&gt;JSON names require double quotes. JavaScript object names don&amp;rsquo;t.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Data is seperated by commas. e.g., &lt;code&gt;&amp;quot;name&amp;quot;:&amp;quot;John&amp;quot;, &amp;quot;age&amp;quot;:30&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Curly braces hold objects.&lt;/p&gt;

&lt;p&gt;e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;John&amp;quot;,
  &amp;quot;age&amp;quot;: 30,
  &amp;quot;member&amp;quot;: false,
  &amp;quot;spouse&amp;quot;: { //object
    &amp;quot;first_name&amp;quot;: &amp;quot;Mary&amp;quot;,
    &amp;quot;last_name&amp;quot;: &amp;quot;Smith&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Square brackets hold arrays.&lt;/p&gt;

&lt;p&gt;e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;John&amp;quot;,
    &amp;quot;age&amp;quot;:  30,
    &amp;quot;member&amp;quot;: false,
    &amp;quot;phoneNumbers&amp;quot;: [ //array
        {
            &amp;quot;description&amp;quot;: &amp;quot;home&amp;quot;,
            &amp;quot;number&amp;quot;: &amp;quot;123-456-7890&amp;quot;
        },
        {
            &amp;quot;description&amp;quot;: &amp;quot;mobile&amp;quot;,
            &amp;quot;number&amp;quot;: &amp;quot;000-111-2222&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Data Types&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Values must be one of the following data types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a string
sequence of zero or more Unicode characters.
e.g., &lt;code&gt;{ &amp;quot;name&amp;quot;:&amp;quot;John&amp;quot; }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a number
Integer, Fraction and Exponent.
e.g., &lt;code&gt;{ &amp;quot;age&amp;quot;:30 }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;an object (JSON object)
starts and ends with &amp;lsquo;{&amp;rsquo; and &amp;lsquo;}&amp;rsquo;. a number of string value pairs can reside between.
Keys must be strings, and values must be a valid JSON data type.
e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
&amp;quot;employee&amp;quot;:{ &amp;quot;name&amp;quot;:&amp;quot;John&amp;quot;, &amp;quot;age&amp;quot;:30, &amp;quot;city&amp;quot;:&amp;quot;New York&amp;quot; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;an array
starts and ends with &amp;lsquo;[&amp;rsquo; and &amp;lsquo;]&amp;rsquo;. a number of values can reside between.
e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
&amp;quot;employees&amp;quot;:[ &amp;quot;John&amp;quot;, &amp;quot;Anna&amp;quot;, &amp;quot;Peter&amp;quot; ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a boolean
true or false. (TRUE or FALSE is not acceptable!).
e.g., &lt;code&gt;{ &amp;quot;accept&amp;quot;:true }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;null
null (NULL is not acceptable).
e.g., &lt;code&gt;{ &amp;quot;coupon&amp;quot;:null }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JSON values cannot be a function, a date or undefined. (In JavaScript you can have these values)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Blogging with Hugo</title>
      <link>https://cse031sust02.github.io/post/blogging-with-hugo/</link>
      <pubDate>Sun, 09 Apr 2017 16:31:49 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/blogging-with-hugo/</guid>
      <description>

&lt;hr /&gt;

&lt;h4 id=&#34;install-hugo&#34;&gt;Install Hugo&lt;/h4&gt;

&lt;p&gt;To install Hugo in your operating system, please visit the &lt;a href=&#34;http://gohugo.io/overview/installing/&#34;&gt;official guide&lt;/a&gt;. As I am using ubuntu, installing Hugo is as simple as
   &lt;code&gt;sudo apt install hugo&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h4&gt;

&lt;p&gt;Hugo allows us to scaffold a website quickly and easily.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;create new site&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site blog
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Choose a theme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Download a theme from &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;https://themes.gohugo.io/&lt;/a&gt; and put in &amp;lsquo;theme&amp;rsquo; folder&lt;/p&gt;

&lt;p&gt;for example, in order to install the &lt;a href=&#34;http://themes.gohugo.io/theme/casper/&#34;&gt;casper&lt;/a&gt; theme,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blog$ mkdir themes
blog$ cd themes
blog/themese$ git clone https://github.com/vjeantet/hugo-theme-casper casper
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;configuration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;update your configuration in config.toml&lt;/p&gt;

&lt;p&gt;for example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
baseURL = &amp;quot;http://example.org/&amp;quot;

[params]
description = &amp;quot;YOUR DESCRIPTION GOES HERE&amp;quot;
author = &amp;quot;YOUR NAME&amp;quot;
authorlocation = &amp;quot;YOUR LOCATION&amp;quot;
authorwebsite = &amp;quot;YOUR SITE&amp;quot;
bio= &amp;quot;YOUR BIO&amp;quot;

[[menu.main]]
name = &amp;quot;Blog&amp;quot;
weight = -120
identifier = &amp;quot;blog&amp;quot;
url = &amp;quot;/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;create new post&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/hello-world.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now put content inside the newly created hello-world.md file,&lt;/p&gt;

&lt;p&gt;for example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-17T16:12:50+06:30&amp;quot;
title = &amp;quot;Hello world&amp;quot;

+++

Hello World. This is my first post.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Serve content&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -t YOURTHEME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As i am using casper theme,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -t casper
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can view your blog at &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;for more details, pleaes visit the &lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;official doc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;deploy-to-github-page&#34;&gt;Deploy to Github page&lt;/h4&gt;

&lt;p&gt;Full details on how to host your Hugo based website on github page can be found here &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog&#34;&gt;https://gohugo.io/tutorials/github-pages-blog&lt;/a&gt;. But if you are a newbie like me, it may will look much complex at first time. So, here are some easy steps&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create &lt;code&gt;(your-project)-hugo&lt;/code&gt; repository&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;for example, create a new repository in Github named &lt;code&gt;hugo-blog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, in your terminal, initialize a new git repo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blog$ git init
blog$ git remote add origin https://github.com/YOURUSERNAME/hugo-blog.git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create &lt;code&gt;(your-username).github.io&lt;/code&gt; repository&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;for example, in my case it is &lt;code&gt;cse031sust02.github.io&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;now, add a submodule with the public folder&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blog$ git submodule add https://github.com/YOUR-USERNAME/YOUR-USERNAME.github.io.git public
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Push Everything to Github&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blog$ git add .
blog$ git commit -am &#39;push everything&#39;
blog$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Deploy&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blog$ hugo -t casper
blog$ cd public
blog$ git add .
blog/public$ commit -m &amp;quot;deploy&amp;quot;
blog/public$ push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then you should visit the blog at https://(YOUR-USERNAME).github.com. For example, my site is at &lt;a href=&#34;https://cse031sust02.github.com&#34;&gt;https://cse031sust02.github.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hello world</title>
      <link>https://cse031sust02.github.io/post/hello-world/</link>
      <pubDate>Sun, 09 Apr 2017 15:36:30 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/hello-world/</guid>
      <description>&lt;p&gt;Hello World. This is my first post.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>