<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cse031sust02</title>
    <link>https://cse031sust02.github.io/index.xml</link>
    <description>Recent content on cse031sust02</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2017</copyright>
    <lastBuildDate>Sat, 22 Apr 2017 16:13:16 +0600</lastBuildDate>
    <atom:link href="https://cse031sust02.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A very short introduction to redis</title>
      <link>https://cse031sust02.github.io/post/intro-to-redis/</link>
      <pubDate>Sat, 22 Apr 2017 16:13:16 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/intro-to-redis/</guid>
      <description>

&lt;hr /&gt;

&lt;h3 id=&#34;what-is-redis&#34;&gt;What is Redis? :&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Redis is an in-memory data structure server. Which can be used as database, cache and message broker.&lt;/p&gt;

&lt;p&gt;Redis = REmote DIctionary Server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a key-value store is commonly known today as a dictionary.
 &lt;a href=&#34;https://en.wikipedia.org/wiki/Key-value_database&#34;&gt;https://en.wikipedia.org/wiki/Key-value_database&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;data-structure-server&#34;&gt;- Data Structure Server&lt;/h6&gt;

&lt;p&gt;Data Structure is a particular way of organizing data. Redis is a data structure server. An important difference between Redis and other structured storage systems is that Redis supports not only strings, but also abstract data types.&lt;/p&gt;

&lt;p&gt;supported data structures : strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries.&lt;/p&gt;

&lt;p&gt;more details &amp;gt;
&lt;a href=&#34;https://redis.io/topics/data-types&#34;&gt;https://redis.io/topics/data-types&lt;/a&gt;
&lt;a href=&#34;https://redis.io/topics/data-types-intro&#34;&gt;https://redis.io/topics/data-types-intro&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&#34;popular-nosql-database&#34;&gt;- Popular noSQL Database&lt;/h6&gt;

&lt;p&gt;It is a very popular noSQL database. Redis is often ranked the most popular key-value database.
- more details :&lt;br /&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Redis&#34;&gt;https://en.wikipedia.org/wiki/Redis&lt;/a&gt;
&lt;a href=&#34;http://db-engines.com/en/ranking/key-value+store&#34;&gt;http://db-engines.com/en/ranking/key-value+store&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&#34;message-broker&#34;&gt;- Message Broker&lt;/h6&gt;

&lt;p&gt;a messaging broker is an intermediary for messaging. It gives applications a common platform to send and receive messages, and the messages are safe until received.&lt;/p&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;Redis is a fantastic choice if you want a highly scalable data store shared by multiple processes, multiple applications, or multiple servers.&lt;/p&gt;

&lt;h3 id=&#34;performances-benchmarks&#34;&gt;Performances &amp;amp; Benchmarks&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://redis.io/topics/benchmarks&#34;&gt;https://redis.io/topics/benchmarks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dwyl/learn-redis#performance--benchmarks&#34;&gt;https://github.com/dwyl/learn-redis#performance--benchmarks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;let-s-play&#34;&gt;Let&amp;rsquo;s Play&lt;/h3&gt;

&lt;hr /&gt;

&lt;h6 id=&#34;install&#34;&gt;Install&lt;/h6&gt;

&lt;p&gt;&lt;a href=&#34;http://redis.io/download#installation&#34;&gt;http://redis.io/download#installation&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&#34;try&#34;&gt;Try&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://try.redis.io/&#34;&gt;http://try.redis.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dwyl/learn-redis&#34;&gt;https://github.com/dwyl/learn-redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;all-commands&#34;&gt;All Commands&lt;/h6&gt;

&lt;p&gt;&lt;a href=&#34;https://redis.io/commands&#34;&gt;https://redis.io/commands&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&#34;cli&#34;&gt;CLI&lt;/h6&gt;

&lt;p&gt;After we install Redis on our local pc, open the Redis CLI using the &lt;code&gt;redis-cli&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ redis-cli
127.0.0.1:6379&amp;gt; keys *
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;gui&#34;&gt;GUI&lt;/h6&gt;

&lt;p&gt;While Redis users heavily use the Command Line Interface (CLI), sometime we may like to use any Graphical User Interface (GUI). Here are some GUIs available for different platform.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Redis Commander
&lt;a href=&#34;https://github.com/joeferner/redis-commander&#34;&gt;https://github.com/joeferner/redis-commander&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Redismin
&lt;a href=&#34;https://www.redsmin.com/&#34;&gt;https://www.redsmin.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Redis Desktop Manager
&lt;a href=&#34;http://docs.redisdesktop.com/en/latest/&#34;&gt;http://docs.redisdesktop.com/en/latest/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Database &amp; ACID properties</title>
      <link>https://cse031sust02.github.io/post/database-acid/</link>
      <pubDate>Tue, 11 Apr 2017 11:13:09 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/database-acid/</guid>
      <description>

&lt;hr /&gt;

&lt;h3 id=&#34;database&#34;&gt;Database :&lt;/h3&gt;

&lt;p&gt;A database is a collection of data that is stored in an organized manner.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the term &amp;ldquo;database&amp;rdquo; is often used casually to refer to both a database and the DBMS used to manipulate it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;database-models&#34;&gt;Database Models :&lt;/h3&gt;

&lt;p&gt;A database model refers to the logical structure, representation or layout of a database and how the data will be stored, managed and processed within it.&lt;/p&gt;

&lt;p&gt;There are many kinds of data models. Such as Relational model, Network model, Entity-attribute-value model, Object-oriented database model and many more..&lt;/p&gt;

&lt;p&gt;DBMS popularity broken down by database model : &lt;a href=&#34;http://db-engines.com/en/ranking&#34;&gt;http://db-engines.com/en/ranking&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;dbms-rdbms&#34;&gt;DBMS &amp;amp; RDBMS :&lt;/h3&gt;

&lt;p&gt;DBMS stands for Database Management System. It is the software application to store and manage the data.&lt;/p&gt;

&lt;p&gt;RDBMS stands for Relational Database Management System. It is based on the relational model. The relational model has relationship between tables using primary keys, foreign keys and indexes.&lt;/p&gt;

&lt;p&gt;Example : MySQL, PostgreSQL, MongoDB, Microsoft SQL Server, Oracle etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can say that a RDBMS is an in an extension of a DBMS. The key difference is that RDBMS applications store data in a tabular form, while DBMS applications store data as files. Does that mean there are no tables in a DBMS? There can be, but there will be no “relation” between the tables, like in a RDBMS.&lt;/p&gt;

&lt;p&gt;src - &lt;a href=&#34;https://blog.udemy.com/differences-between-dbms-and-rdbms/&#34;&gt;https://blog.udemy.com/differences-between-dbms-and-rdbms/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most software products in the market today are both DBMS and RDBMS compliant.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;what-is-acid&#34;&gt;What is ACID? :&lt;/h3&gt;

&lt;p&gt;ACID is a set of properties of database transactions (a single logical operation on the data is called a transaction).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Atomicity&lt;/strong&gt; :  If one part of the transaction fails, then the entire transaction fails, and the database state is left unchanged.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consistency&lt;/strong&gt; : Any data written to the database must be valid according to all defined rules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Isolation&lt;/strong&gt; : One transaction cannot read data from another transaction that is not yet completed. If two transactions are executing concurrently, each one will see the world as if they were executing sequentially, and if one needs to read data that is written by another, it will have to wait until the other is finished.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Durability&lt;/strong&gt; : Once a transaction is complete, it is guaranteed that all of the changes have been recorded to a durable medium (such as a hard disk).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://s3-us-west-1.amazonaws.com/morpheus-staging/system/spud_media/332/original/acidoverwiew.png?1422558433&#34; alt=&#34;Foo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source :&lt;/strong&gt; &lt;a href=&#34;https://www.morpheusdata.com/blog/2015-01-29-when-do-you-need-acid-compliance-&#34;&gt;morpheusdata&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;acid-compliants&#34;&gt;ACID compliants :&lt;/h3&gt;

&lt;p&gt;Oracle is ACID compliant.&lt;/p&gt;

&lt;p&gt;PostgreSQL is &lt;a href=&#34;https://www.postgresql.org/about&#34;&gt;ACID compliant&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MySQL is not an ACID compliant database server by design, but if you use the InnoDB storage engine for your tables, you will be able to perform transaction-safe operations on your database. Source : &lt;a href=&#34;http://stackoverflow.com/questions/4264849/how-to-implement-the-acid-model-for-a-database&#34;&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Personal Git Cheat Sheet</title>
      <link>https://cse031sust02.github.io/post/git-cheatsheet/</link>
      <pubDate>Tue, 11 Apr 2017 11:11:48 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/git-cheatsheet/</guid>
      <description>

&lt;hr /&gt;

&lt;h3 id=&#34;what-is-git&#34;&gt;What is GIT?&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Git is a free and open source distributed version control system.&lt;/p&gt;

&lt;p&gt;Why we use VCS (version control system)?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code Revision&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Like a Time Machine&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Multiple Developer&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why GIT (among other VCS)?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can work locally without any central server&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;install&#34;&gt;Install&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;configuration&#34;&gt;Configuration&lt;/h4&gt;

&lt;p&gt;Use &lt;strong&gt;&lt;code&gt;git config&lt;/code&gt;&lt;/strong&gt; command to get and set configuration variables&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Config file locations&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;ndash;system : configuaration for every user on the system(OS) and all their repositories.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ndash;global : configuarations specific to your user. (OS user)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ndash;local : configuarations for current repository.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Set Config&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ git config --global user.name &amp;quot;John Doe&amp;quot;
$ git config --global user.email &amp;quot;johndoe@example.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Get Config&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ git config --list
$ git config --global --list
$ git config --system --list
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Extra&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html&#34;&gt;What&amp;rsquo;s Inside .git Directory?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Editor&lt;/strong&gt; : By default, Git uses whatever you’ve set as your default text editor ($VISUAL or $EDITOR) or else falls back to the vi editor to create and edit your commit and tag messages.for example, to use Sublime as the editor, &lt;code&gt;git config --global core.editor &amp;quot;subl -n -w&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;aliases&lt;/strong&gt; : we can also easily set up an alias for each command using git config.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;initialization-create-a-new-repository&#34;&gt;Initialization (create a new repository)&lt;/h4&gt;

&lt;p&gt;To initialize git on a project, simply use &lt;code&gt;git init&lt;/code&gt; command.
( &lt;em&gt;a hidden folder named &lt;code&gt;.git&lt;/code&gt; will be created in the project&amp;rsquo;s root directory&lt;/em&gt; )&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To get a copy of an existing Git repository, use the &lt;code&gt;git clone&lt;/code&gt; command.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;lifecycle&#34;&gt;Lifecycle&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://git-scm.com/book/en/v2/book/02-git-basics/images/lifecycle.png&#34; alt=&#34;Lifecycle&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;source&lt;/strong&gt; : &lt;a href=&#34;https://git-scm.com/book/en/v2/book/02-git-basics/images/lifecycle.png&#34;&gt;https://git-scm.com/book/en/v2/book/02-git-basics/images/lifecycle.png&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Files has mainly 4 statuses :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;untracked&lt;/strong&gt; : at first any new file is untracked.&lt;/p&gt;

&lt;p&gt;use &lt;code&gt;git add&lt;/code&gt; command to stage the files&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;staged&lt;/strong&gt; : after we use &amp;lsquo;git add&amp;rsquo; command, the file is statged.&lt;/p&gt;

&lt;p&gt;use &lt;code&gt;git commit&lt;/code&gt; command to commit the staged files&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;unchanged&lt;/strong&gt; : If the file is not changed since its last commit, the file is unchanged.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;unstaged&lt;/strong&gt; : If there is any modification to that staged or unchanged file, that becomes &lt;code&gt;unstaged&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;again use &lt;code&gt;git add&lt;/code&gt; command to stage those files, and &amp;lsquo;commit&amp;rsquo; command to commit the file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;we can use &lt;code&gt;git commit -am &amp;quot;commit message&amp;quot;&lt;/code&gt; command to &amp;lsquo;add unstaged files and commit&amp;rsquo; in a single command. more details on the commit section.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;commands&#34;&gt;Commands&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;git-add&#34;&gt;git add&lt;/h4&gt;

&lt;p&gt;Use &lt;code&gt;git add&lt;/code&gt; command to track the untracked files (put it on the stage).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;add single file : &lt;code&gt;git add file.ext&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add all files : &lt;code&gt;git add .&lt;/code&gt; or &lt;code&gt;git add -A&lt;/code&gt; . &lt;a href=&#34;http://stackoverflow.com/questions/572549/difference-between-git-add-a-and-git-add&#34;&gt;Difference?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;git-commit&#34;&gt;git commit&lt;/h4&gt;

&lt;p&gt;Commits the staged snapshot to the project history.&lt;/p&gt;

&lt;p&gt;Different ways to commit,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;commit all staged files : &lt;code&gt;$ git commit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This will open an editor, write your commit message and exit. To write the commit message directly in command line, use the &lt;code&gt;-m&lt;/code&gt; flag. e.g, &lt;code&gt;$ git commit -m &amp;quot;My Commit Message&amp;quot;&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;commit all staged and unstaged files : &lt;code&gt;$ git commit -am &amp;quot;commit message&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;when we use &amp;lsquo;-a&amp;rsquo; flag, it includes all changed files. Git will automatically stage every unstaged files before doing the commit. note that, untracked files will not be commited using this command.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;commit single file :  &lt;code&gt;$ git commit -m &amp;quot;commit message&amp;quot; FILE_NAME&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;commit multiple files : &lt;code&gt;git commit -m &amp;quot;commit message&amp;quot; FILE1, FILE2..&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;git-log&#34;&gt;git log&lt;/h4&gt;

&lt;p&gt;Show commit logs&lt;/p&gt;

&lt;p&gt;use &lt;code&gt;git log&lt;/code&gt; command to show all the commits from the very beginning (for currently active branch).&lt;/p&gt;

&lt;p&gt;e.g,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;commit 1cddaa29ad059a6083e776cc3e4b950e6487f236
Author: Talha Ibne Imam &amp;lt;talha@bscheme.com&amp;gt;
Date:   Sat Apr 22 12:26:11 2017 +0600

    Registration Complete

commit eea5997a17f02e78d78ccf69a233123192a73822
Author: Talha Ibne Imam &amp;lt;talha@bscheme.com&amp;gt;
Date:   Thu Apr 20 14:13:18 2017 +0600

    Desing Complete

commit 178d3c00a5e55cd0f6ba0170a9dd58dda24561cf
Author: Talha Ibne Imam &amp;lt;talha@bscheme.com&amp;gt;
Date:   Thu Apr 20 11:35:36 2017 +0600

    First Commit

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are many different options avalaible for showing logs in different ways.&lt;/p&gt;

&lt;p&gt;for example,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Most recent commits : &lt;code&gt;git log -3&lt;/code&gt; (last 3 commits)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Show commits in one line : &lt;code&gt;git log --pretty=oneline&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Show commits for a specific file : &lt;code&gt;git log test.txt&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Show commits by any specific author : &lt;code&gt;git log --author=talha&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Show in a pretty format : &lt;code&gt;git log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&#39; --abbrev-commit --date=relative&lt;/code&gt; [&lt;em&gt;src : &lt;a href=&#34;https://coderwall.com/lordmonkey/comments&#34;&gt;Coderwall&lt;/a&gt;&lt;/em&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;for more details, please use the command &lt;code&gt;git log --help&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;git-show&#34;&gt;git show :&lt;/h4&gt;

&lt;p&gt;shows the changes of a particular commit*&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git show COMMIT_HASH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*&lt;em&gt;only first 4-5 character of COMMIT_HASH is enough!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If we do not specify COMMIT_HASH, then it will show changes from HEAD. (HEAD is a reference to the last commit in the currently checked-out branch.)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;*&lt;code&gt;git show&lt;/code&gt; can be used to show other objects rather than commits. such as tags, trees etc. for more details, please visit &lt;a href=&#34;https://git-scm.com/docs/git-show&#34;&gt;official link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;git-diff&#34;&gt;git diff:&lt;/h4&gt;

&lt;p&gt;Show changes between commits, commit and working tree, etc&lt;/p&gt;

&lt;p&gt;we usually use the &lt;code&gt;git status&lt;/code&gt; command to see which files were currently changed. To understand how they were changed in detail, we can use &lt;code&gt;git diff&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/strong&gt; : show changes only that are unstaged.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;all unstaged files : &lt;code&gt;$ git diff&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;single unstaged file : &lt;code&gt;$ git diff FILENAME&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;multiple unstaged file : &lt;code&gt;$ git diff FILE1 FILE2&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;git diff --staged&lt;/code&gt;&lt;/strong&gt; : show changes only that are staged.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;all staged files : &lt;code&gt;$ git diff --staged&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;single staged file : &lt;code&gt;$ git diff --staged FILENAME&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;multiple staged file : &lt;code&gt;$ git diff --staged FILE1 FILE2&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;we can use &lt;code&gt;--cached&lt;/code&gt; instead of &lt;code&gt;--staged&lt;/code&gt; (&lt;code&gt;--staged&lt;/code&gt; is a synonym of &lt;code&gt;--cached&lt;/code&gt;).&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;git diff HEAD&lt;/code&gt;&lt;/strong&gt; : show changes that are tracked (staged + unstaged).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Cookie</title>
      <link>https://cse031sust02.github.io/post/intro-to-cookie/</link>
      <pubDate>Tue, 11 Apr 2017 11:11:22 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/intro-to-cookie/</guid>
      <description>

&lt;hr /&gt;

&lt;h3 id=&#34;what-is-a-http-cookie&#34;&gt;What is a HTTP Cookie?&lt;/h3&gt;

&lt;p&gt;Cookies are small files that is sent from a website(server) and stored on users&amp;rsquo;s computer by a browser.&lt;/p&gt;

&lt;p&gt;It is also called web cookie, Internet cookie, browser cookie or simply cookie.&lt;/p&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;Cookies are mainly used for these purposes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Session management (user logins, shopping carts)&lt;/li&gt;
&lt;li&gt;Personalization (user preferences)&lt;/li&gt;
&lt;li&gt;Tracking (analyzing user behavior)
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;source : &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies&#34;&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-server-client-sends-cookie&#34;&gt;How server/client sends cookie?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Server to Browser&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The server tells the client (Browser) to store a cookie using the Set-Cookie HTTP header.&lt;/p&gt;

&lt;p&gt;for example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.0 200 OK
Content-type: text/html
Set-Cookie:&amp;quot;MyCookieName=MyValue; expires=Tue, 11-Apr-2016 09:22:03 GMT; Max-Age=3600&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;expires date time is in GMT.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if expire time is omitted, the cookie will expire at the end of the session (when the browser closes). These type of cookies are called &amp;lsquo;session cookies&amp;rsquo;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To set cookie using &lt;a href=&#34;http://php.net/manual/en/function.setcookie.php&#34;&gt;php&lt;/a&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;setcookie(&amp;quot;mycookie&amp;quot;, &#39;20seconds&#39;, time()+20);  /* expire in 20 second */
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Browser to the server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The browser will send back all previously stored cookies to the server using the Cookie header.&lt;/p&gt;

&lt;p&gt;for example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /my_page.html HTTP/1.1
Host: www.example.com
Cookie: MyCookieName=MyValue 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details, please check &lt;a href=&#34;http://www.cookiecentral.com/faq/#3.2&#34;&gt;http://www.cookiecentral.com/faq/#3.2&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;secuirity&#34;&gt;Secuirity&lt;/h3&gt;

&lt;p&gt;Confidential or sensitive information should never be stored or transmitted in HTTP Cookies as the entire mechanism is inherently insecure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exception Handling with PHP</title>
      <link>https://cse031sust02.github.io/post/exception-handling-with-php/</link>
      <pubDate>Mon, 10 Apr 2017 15:56:44 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/exception-handling-with-php/</guid>
      <description>

&lt;hr /&gt;

&lt;h3 id=&#34;what-is-exception&#34;&gt;What is Exception&lt;/h3&gt;

&lt;p&gt;Exception is an error condition which change the normal flow of code execution. Exceptions are catchable. That means, we can catch and try to recover or continue with the execution of the program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lsquo;errors&amp;rsquo; vs &amp;lsquo;exceptions&amp;rsquo; :&lt;/strong&gt;
Generally errors occur at the language level (ie, the syntax is wrong, missing parenthesis etc)&lt;/p&gt;

&lt;h3 id=&#34;exceptions-in-php&#34;&gt;Exceptions in PHP&lt;/h3&gt;

&lt;p&gt;Exceptions were introduced in PHP 5. It is used in an object oriented way. The exception model of PHP is very similar to exception model of other programming languages.&lt;/p&gt;

&lt;p&gt;Exceptions can be thrown and caught.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;one basic example,&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;  try {
    throw new Exception(&#39;An Exception&#39;);
  } catch (Exception $e) {
    echo $e-&amp;gt;getMessage();
  }
  //output : An Exception
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;throw&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The thrown object must be an instance of the Exception class (or a subclass of Exception). Otherwise, there will be a PHP Fatal Error.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;try&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If there is a &amp;lsquo;try&amp;rsquo; block, then there must be atleast one &amp;lsquo;catch&amp;rsquo; or &amp;lsquo;finally&amp;rsquo; block. (Otherwise PHP Fatal Error)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;catch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When an exception is thrown, code following the statement will not be executed, and PHP will attempt to find the first matching catch block. If an exception is not caught (either by &amp;lsquo;catch&amp;rsquo; or &amp;lsquo;finally&amp;rsquo; block), there will be a PHP Fatal Error with an &amp;ldquo;Uncaught Exception &amp;hellip;&amp;rdquo; message (unless a handler has been defined with set_exception_handler method).&lt;/p&gt;

&lt;p&gt;Exceptions can also be thrown (or re-thrown) within a catch block.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;finally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Introduces in PHP 5.5. &amp;lsquo;finally&amp;rsquo; block can be used after or instead of catch blocks. Code within the finally block will ALWAYS be executed after the try and catch blocks ( regardless of whether an exception has been thrown or not)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;another example with more details,&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function inverse($number) {
    if ($number==0) {
        throw new Exception(&#39;Division by zero.&#39;);
    }

    return 1/$number;
}

try {
    $random_number = rand(0,5);
    $result = inverse($random_number);
    // ONLY echo when no exception is thrown
    echo $result;
} catch (Exception $e) {
    //ONLY echo if there is an exception
    echo &amp;quot;Exception Message :&amp;quot;.$e-&amp;gt;getMessage();
} finally {
    // always echo
    echo &amp;quot;I am always there&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note : Internal PHP functions mainly use Error reporting, only modern Object oriented extensions use exceptions. However, errors can be simply translated to exceptions with ErrorException. - &lt;a href=&#34;http://php.net/manual/en/language.exceptions.php&#34;&gt;php.net&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Accepting payments on your site using Stripe</title>
      <link>https://cse031sust02.github.io/post/payment-using-stripe/</link>
      <pubDate>Mon, 10 Apr 2017 15:27:28 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/payment-using-stripe/</guid>
      <description>

&lt;hr /&gt;

&lt;h4 id=&#34;what-is-stripe-https-stripe-com&#34;&gt;What is &lt;a href=&#34;https://stripe.com/&#34;&gt;Stripe&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;A popular payment processor. It accepts payments from customers around the world on web or in mobile apps.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;payment-types&#34;&gt;Payment types&lt;/h4&gt;

&lt;p&gt;Stripe accepts all major debit and credit cards in 100+ currencies. It also supports bank and direct debit payments, local payment wallets, Alipay and cryptocurrency (Bitcoin) etc.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;accepting-payments-with-cards&#34;&gt;Accepting Payments with Cards&lt;/h4&gt;

&lt;p&gt;Using card information with Stripe is a two-step process&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Securely collect payment information using tokenization&lt;/li&gt;
&lt;li&gt;Use the payment information in a charge request or save it for later&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Step 1. Securely collect payment information using tokenization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Stripe provides three methods for tokenizing customer’s payment information over HTTPS
Checkout, Stripe.js &amp;amp; Mobile SDKs&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://stripe.com/checkout&#34;&gt;Checkout&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to integrate Stripe is via Checkout, an embedded tool that takes care of building an HTML form, validating user input, and securing your customers&amp;rsquo; card data. Using Checkout, sensitive credit card information is sent directly to Stripe, and does not touch your server. customers can pay instantly, without being redirected away to complete the transaction.&lt;/p&gt;

&lt;p&gt;In addition to credit and debit cards, Checkout supports Alipay and Bitcoin too. more types of payment coming soon.&lt;/p&gt;

&lt;p&gt;Checkout has 12 languages to pay with a localized experience.&lt;/p&gt;

&lt;p&gt;Embedding checkout in your site
&lt;a href=&#34;https://stripe.com/docs/checkout/tutorial&#34;&gt;https://stripe.com/docs/checkout/tutorial&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://stripe.com/docs/quickstart#elements&#34;&gt;Elements&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to customize the payment form for our need, then we can make use of Stripe Elements.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://stripe.com/docs/mobile&#34;&gt;Mobile SDKs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Step 2. Use the tokenized payment information&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While a token is created on the first step, now the token is used by our server-side to make an API request to Stripe. Two common examples of when you would use a token are,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Charging the customer immediately&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can create a one-time charge request to charge a customer’s card.
The API request will contain the token, currency, amount to charge, and any additional information we may want to pass. &lt;a href=&#34;https://stripe.com/docs/quickstart#charge-immediately&#34;&gt;more details..&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Saving the customer’s card information&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we’d like to have the ability to charge the customers again in future (without them needing to enter their payment information again), we can create an API request to store their payment details inside a customer record instead. &lt;a href=&#34;https://stripe.com/docs/quickstart#saving-card-information&#34;&gt;more details..&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>HTTP প্রোটোকল  এর বেসিক কাহিনী!</title>
      <link>https://cse031sust02.github.io/post/protocol-basics/</link>
      <pubDate>Mon, 10 Apr 2017 11:31:28 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/protocol-basics/</guid>
      <description>

&lt;hr /&gt;

&lt;h4 id=&#34;tcp-ip&#34;&gt;TCP/IP&lt;/h4&gt;

&lt;p&gt;TCP = Transmission Control Protocol&lt;/p&gt;

&lt;p&gt;IP = Internet Protocol&lt;/p&gt;

&lt;p&gt;TCP/IP হলো একটা Protocol Suite.&lt;/p&gt;

&lt;p&gt;TCP/IP = TCP + IP + more protocols ..&lt;/p&gt;

&lt;p&gt;WWW ( World Wide Web ) এ Browser গুলা Server এর সাথে connect করার জন্য TCP use করে।
HTTP, HTTPS, SMTP, FTP ইত্যাদি protocol গুলা তাদের কাজের জন্য  TCP কে use করে।&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;http-hypertext-transfer-protocol&#34;&gt;HTTP (HyperText Transfer Protocol)&lt;/h4&gt;

&lt;p&gt;HTTP হলো একটা request-response stateless protocol যার মাধ্যমে Client এবং Server পরস্পর Communicate করতে পারে।&lt;/p&gt;

&lt;p&gt;Client টা Server এর কাছে Request পাঠায় , Server সেইটার Response পাঠায়।&lt;/p&gt;

&lt;h6 id=&#34;request-message-এর-format&#34;&gt;Request Message এর Format&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;Request Line 
Request Header fields
Empty Line 
An Optional Message Body
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /index.html HTTP/1.1
Host : www.example.com 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;GET হলো Method, index.html হলো Requested File, Http/1.1 হলো HTTP Version&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;response-message-এর-format&#34;&gt;Response Message এর Format&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;Status  Line 
Response Header Fields 
Empty Line 
An Optional Message Body
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTTP/1.1 = HTTP Version, 200 = Status Code, OK = reason message&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Header fields এর সম্পর্কে জানতে &lt;a href=&#34;http://en.wikipedia.org/wiki/List_of_HTTP_header_fields&#34;&gt;Wikipedia&lt;/a&gt; তে দেখুন&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;সুতরাং , আমরা যখন ব্রাউজার এ &lt;code&gt;www.example.com/blog.php&lt;/code&gt; লিখে এন্টার করি,  ব্রাউজার (Client) টা Server কে আসলে এরকম একটা request করে,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET  /blog.php HTTP/1.1 
Host : www.example.com 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;আর Server এর response টা এরকম,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.0 200 OK
Date: Tue, 26 May 2015 23:59:59 GMT
Content-Type: text/html
Content-Length: 1202 

&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Blog&amp;lt;/h1&amp;gt;
  content goes here 
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;http-methods-verbs&#34;&gt;HTTP Methods/Verbs&lt;/h4&gt;

&lt;p&gt;Resource এ কি টাইপের action করতে চাই সেটা indicate করার জন্য কিছু method আছে ।
common method গুলা হলো  GET, POST, PUT, DELETE .&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;status-codes&#34;&gt;Status Codes&lt;/h4&gt;

&lt;p&gt;Informational : 1XX &amp;ndash; request recieve হইসে, process চলসে ।&lt;/p&gt;

&lt;p&gt;Successfull : 2XX &amp;ndash; client এর request succssfully receive করা হইসে।&lt;/p&gt;

&lt;p&gt;Redirectional : 3XX &amp;ndash; Client এর extra কিছু করতে হবে, mostly redirected ।&lt;/p&gt;

&lt;p&gt;Client Error : 4XX &amp;ndash; Client কোন error করছে ।&lt;/p&gt;

&lt;p&gt;Server Error : 5XX &amp;ndash; Server এ কোন সমস্যা আছে।&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;https-hypertext-transfer-protocol-secure&#34;&gt;HTTPS ( HyperText Transfer Protocol Secure )&lt;/h4&gt;

&lt;p&gt;HTTPS = HTTP + SSL (Secure Socket Layer)&lt;/p&gt;

&lt;p&gt;এটা HTTP এর উপরে একটা Layer (SSL/TLS Protocol) দিয়ে বানানো যেটা HTTP Communication এ কিছু secuirity যোগ করে।
এটার মেইন উদ্দেশ্য হলো Wiretapping আর Man-in-the-middle-attack থেকে protect করা।&lt;/p&gt;

&lt;p&gt;HTTPS এ Server ও Client গুলা  HTTP এর মতই communicate করে কিন্তু communication টা একটা Secure SSL connection এর উপরে হয় যেটা request এবং response টাকে encrypt/decrypt করে।&lt;/p&gt;

&lt;p&gt;SSL টার mainly ২ টা কাজ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;এইটা verify করা যে Client টা Directly Server এর সাথেই communicate করতেছে &lt;/li&gt;&lt;/li&gt;
&lt;li&gt;এইটা ensure করা যে client ও  server এর মধ্যকার কথাবার্তা শুধু client ও server ই পরতে পারতেছে&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTPS এ header, message সবই encrypted থাকে।&lt;/p&gt;

&lt;p&gt;কোন site কে যদি আমরা HTTPS use করে secure করতে চাই তাহলে পুরা site টাকেই HTTPS এ host করতে হবে। এমন না যে কিছু page এ শুধু  করব।&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://cse031sust02.github.io/post/json/</link>
      <pubDate>Sun, 09 Apr 2017 18:15:22 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/json/</guid>
      <description>

&lt;hr /&gt;

&lt;h4 id=&#34;what-is-json&#34;&gt;What is JSON?&lt;/h4&gt;

&lt;p&gt;JSON stands for JavaScript Object Notation.&lt;/p&gt;

&lt;p&gt;Douglas Crockford originally specified the JSON format in the early 2000s. Altohugh it derives from JavaScript, but as of 2017 many programming languages include code to generate and parse JSON-format data.&lt;/p&gt;

&lt;p&gt;JSON filenames use the extension .json.&lt;/p&gt;

&lt;p&gt;The official internet media type for JSON is &amp;lsquo;application/json&amp;rsquo;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;why-use-json&#34;&gt;Why Use JSON?&lt;/h4&gt;

&lt;p&gt;Because It is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lightweight data-interchange format.&lt;/li&gt;
&lt;li&gt;language independent&lt;/li&gt;
&lt;li&gt;&amp;ldquo;self-describing&amp;rdquo; and easy to understand by both humans (to understand) and machines (to parse and generate).&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;usage&#34;&gt;USAGE?&lt;/h4&gt;

&lt;p&gt;JSON is heavily used in these areas : API, NoSQL, AJAX, Package Management (Composer, NPM, Bower etc)&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;why-better-than-xml&#34;&gt;Why better than XML?&lt;/h4&gt;

&lt;p&gt;JSON is faster and easier than XML. It is parsed very easily into a ready-to-use JavaScript object while XML is much more difficult to parse.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;data-structure-rules&#34;&gt;Data Structure &amp;amp; Rules&lt;/h4&gt;

&lt;p&gt;The JSON syntax is a subset of the JavaScript syntax.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Structures&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JSON is defined by two basic structures.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A collection of name/value pairs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Different programming languages support this data structure in different names. Like object, record, struct, dictionary, hash table, keyed list, or associative array.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;e.g., &lt;code&gt;{ &amp;quot;name&amp;quot;: &amp;quot;John&amp;quot;, &amp;quot;age&amp;quot;:  30, &amp;quot;member&amp;quot;: false, &amp;quot;spouse&amp;quot;: { &amp;quot;firstName&amp;quot;: &amp;quot;Mary&amp;quot;, &amp;quot;lastName&amp;quot;: &amp;quot;Smith&amp;quot;} }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ordered list of values.&lt;/p&gt;

&lt;p&gt;In various programming languages, it is called as array, vector, list, or sequence.
e.g., &lt;code&gt;[&amp;quot;John&amp;quot;,&amp;quot;Mary&amp;quot;,&amp;quot;Peter&amp;quot;,&amp;quot;Sally&amp;quot;]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Syntax Rules&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Data is written as name/value pairs. &lt;code&gt;e.g., &amp;quot;name&amp;quot;:&amp;quot;John&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;note : &lt;em&gt;JSON names require double quotes. JavaScript object names don&amp;rsquo;t.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Data is seperated by commas. e.g., &lt;code&gt;&amp;quot;name&amp;quot;:&amp;quot;John&amp;quot;, &amp;quot;age&amp;quot;:30&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Curly braces hold objects.&lt;/p&gt;

&lt;p&gt;e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;John&amp;quot;,
  &amp;quot;age&amp;quot;: 30,
  &amp;quot;member&amp;quot;: false,
  &amp;quot;spouse&amp;quot;: { //object
    &amp;quot;first_name&amp;quot;: &amp;quot;Mary&amp;quot;,
    &amp;quot;last_name&amp;quot;: &amp;quot;Smith&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Square brackets hold arrays.&lt;/p&gt;

&lt;p&gt;e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;John&amp;quot;,
    &amp;quot;age&amp;quot;:  30,
    &amp;quot;member&amp;quot;: false,
    &amp;quot;phoneNumbers&amp;quot;: [ //array
        {
            &amp;quot;description&amp;quot;: &amp;quot;home&amp;quot;,
            &amp;quot;number&amp;quot;: &amp;quot;123-456-7890&amp;quot;
        },
        {
            &amp;quot;description&amp;quot;: &amp;quot;mobile&amp;quot;,
            &amp;quot;number&amp;quot;: &amp;quot;000-111-2222&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Data Types&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Values must be one of the following data types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a string
sequence of zero or more Unicode characters.
e.g., &lt;code&gt;{ &amp;quot;name&amp;quot;:&amp;quot;John&amp;quot; }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a number
Integer, Fraction and Exponent.
e.g., &lt;code&gt;{ &amp;quot;age&amp;quot;:30 }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;an object (JSON object)
starts and ends with &amp;lsquo;{&amp;rsquo; and &amp;lsquo;}&amp;rsquo;. a number of string value pairs can reside between.
Keys must be strings, and values must be a valid JSON data type.
e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
&amp;quot;employee&amp;quot;:{ &amp;quot;name&amp;quot;:&amp;quot;John&amp;quot;, &amp;quot;age&amp;quot;:30, &amp;quot;city&amp;quot;:&amp;quot;New York&amp;quot; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;an array
starts and ends with &amp;lsquo;[&amp;rsquo; and &amp;lsquo;]&amp;rsquo;. a number of values can reside between.
e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
&amp;quot;employees&amp;quot;:[ &amp;quot;John&amp;quot;, &amp;quot;Anna&amp;quot;, &amp;quot;Peter&amp;quot; ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a boolean
true or false. (TRUE or FALSE is not acceptable!).
e.g., &lt;code&gt;{ &amp;quot;accept&amp;quot;:true }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;null
null (NULL is not acceptable).
e.g., &lt;code&gt;{ &amp;quot;coupon&amp;quot;:null }&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JSON values cannot be a function, a date or undefined. (In JavaScript you can have these values)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Blogging with Hugo</title>
      <link>https://cse031sust02.github.io/post/blogging-with-hugo/</link>
      <pubDate>Sun, 09 Apr 2017 16:31:49 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/blogging-with-hugo/</guid>
      <description>

&lt;hr /&gt;

&lt;h4 id=&#34;install-hugo&#34;&gt;Install Hugo&lt;/h4&gt;

&lt;p&gt;To install Hugo in your operating system, please visit the &lt;a href=&#34;http://gohugo.io/overview/installing/&#34;&gt;official guide&lt;/a&gt;. As I am using ubuntu, installing Hugo is as simple as
   &lt;code&gt;sudo apt install hugo&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h4&gt;

&lt;p&gt;Hugo allows us to scaffold a website quickly and easily.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;create new site&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site blog
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Choose a theme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Download a theme from &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;https://themes.gohugo.io/&lt;/a&gt; and put in &amp;lsquo;theme&amp;rsquo; folder&lt;/p&gt;

&lt;p&gt;for example, in order to install the &lt;a href=&#34;http://themes.gohugo.io/theme/casper/&#34;&gt;casper&lt;/a&gt; theme,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blog$ mkdir themes
blog$ cd themes
blog/themese$ git clone https://github.com/vjeantet/hugo-theme-casper casper
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;configuration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;update your configuration in config.toml&lt;/p&gt;

&lt;p&gt;for example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
baseURL = &amp;quot;http://example.org/&amp;quot;

[params]
description = &amp;quot;YOUR DESCRIPTION GOES HERE&amp;quot;
author = &amp;quot;YOUR NAME&amp;quot;
authorlocation = &amp;quot;YOUR LOCATION&amp;quot;
authorwebsite = &amp;quot;YOUR SITE&amp;quot;
bio= &amp;quot;YOUR BIO&amp;quot;

[[menu.main]]
name = &amp;quot;Blog&amp;quot;
weight = -120
identifier = &amp;quot;blog&amp;quot;
url = &amp;quot;/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;create new post&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/hello-world.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now put content inside the newly created hello-world.md file,&lt;/p&gt;

&lt;p&gt;for example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-04-17T16:12:50+06:30&amp;quot;
title = &amp;quot;Hello world&amp;quot;

+++

Hello World. This is my first post.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Serve content&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -t YOURTHEME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As i am using casper theme,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -t casper
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can view your blog at &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;for more details, pleaes visit the &lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;official doc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;deploy-to-github-page&#34;&gt;Deploy to Github page&lt;/h4&gt;

&lt;p&gt;Full details on how to host your Hugo based website on github page can be found here &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog&#34;&gt;https://gohugo.io/tutorials/github-pages-blog&lt;/a&gt;. But if you are a newbie like me, it may will look much complex at first time. So, here are some easy steps&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create &lt;code&gt;(your-project)-hugo&lt;/code&gt; repository&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;for example, create a new repository in Github named &lt;code&gt;hugo-blog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, in your terminal, initialize a new git repo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blog$ git init
blog$ git remote add origin https://github.com/YOURUSERNAME/hugo-blog.git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create &lt;code&gt;(your-username).github.io&lt;/code&gt; repository&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;for example, in my case it is &lt;code&gt;cse031sust02.github.io&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;now, add a submodule with the public folder&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blog$ git submodule add https://github.com/YOUR-USERNAME/YOUR-USERNAME.github.io.git public
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Push Everything to Github&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blog$ git add .
blog$ git commit -am &#39;push everything&#39;
blog$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Deploy&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blog$ hugo -t casper
blog$ cd public
blog$ git add .
blog/public$ commit -m &amp;quot;deploy&amp;quot;
blog/public$ push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then you should visit the blog at https://(YOUR-USERNAME).github.com. For example, my site is at &lt;a href=&#34;https://cse031sust02.github.com&#34;&gt;https://cse031sust02.github.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hello world</title>
      <link>https://cse031sust02.github.io/post/hello-world/</link>
      <pubDate>Sun, 09 Apr 2017 15:36:30 +0600</pubDate>
      
      <guid>https://cse031sust02.github.io/post/hello-world/</guid>
      <description>&lt;p&gt;Hello World. This is my first post.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>